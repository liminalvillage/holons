{"metadata":"{\"defaultCompiler\":{\"version\":\"0.8.0\"},\"sources\":{\"contracts/AppreciativeFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8;\\n\\nimport \\\"./Appreciative.sol\\\";\\n\\n/*\\n    Copyright 2020, Roberto Valenti\\n\\n    This program is free software: you can use it, redistribute it and/or modify\\n    it under the terms of the Peer Production License as published by\\n    the P2P Foundation.\\n    \\n    https://wiki.p2pfoundation.net/Peer_Production_License\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    Peer Production License for more details.\\n */\\n\\ncontract AppreciativeFactory {\\n\\n    mapping (address => address[]) private holons;\\n    mapping (string => address) public toAddress;   //NOTE: Remove on deploy\\n\\n    event NewHolon (string name, address addr);\\n \\n    /// @dev Creates an new holon and adds it to the global and personal list\\n    /// @param _name The name of the holon.\\n    /// @return Address of the new holon\\n\\n   function newHolon( string memory _name, uint  _parameter) public returns (address)\\n    {\\n        //This is required by tests to return the same address. NOTE: it enforces unique names for every holon created.\\n        if (toAddress[_name] > address(0x0)) //An holon with the same name already exists\\n           return toAddress[_name];\\n\\n        Appreciative newholon = new Appreciative(address(this), _name); //create an holon\\n        address addr = address(newholon);\\n        holons[address(0)].push(addr); //add to the global holon list\\n        holons[msg.sender].push(addr); // add it to the local holon list\\n        if (msg.sender != tx.origin)\\n            holons[tx.origin].push(addr); //add it to the personal holon list\\n        \\n        toAddress[_name] = addr; //remove on deploy\\n\\n        emit NewHolon(_name, addr);\\n\\n        return addr;\\n    }\\n\\n    /// @dev Lists every holons ever created\\n    /// @return an array containing the address of every holon ever created.\\n\\n    function listHolons() external view returns (address[] memory ){\\n        return holons[address(0)];\\n    }\\n\\n    /// @dev Lists every holons created by a given address\\n    /// @param _address address;\\n    /// @return an array containing the address of every holon ever created.\\n\\n    function listHolonsOf(address _address) external view returns (address[] memory){\\n        return holons[_address];\\n    }\\n\\n}\\n\",\"versionPragma\":\"^0.8\"},\"contracts/IHolonFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8;\\n\\n\\n/* ---------------------------------------------------\\n * This contract handles Holon creation, tracking and listing\\n * The Holon initiatior is the Holon lead (owner) and he is able to add and remove members\\n * from within the Holon contract\\n *\\n * ----------------------------------------------------\\n */\\ninterface IHolonFactory {\\n\\n    function newHolon(string calldata _flavor,string calldata _name, uint _parameter) external returns (address);\\n    // function getName(address _address) external view returns (string memory);\\n    // function changeName(address _address, string calldata _name) external;\\n    // function isHolon(address _address) external view returns (bool);\\n    // function isMember(address _address) external view returns (bool);\\n    function listHolons() external view returns (address[] memory);\\n    function listHolonsOf(address _address) external view returns (address[] memory);\\n}\",\"versionPragma\":\"^0.8\"},\"contracts/Membrane.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8;\\n\\n/*\\n    Copyright 2020, Roberto Valenti\\n\\n    This program is free software: you can use it, redistribute it and/or modify\\n    it under the terms of the Peer Production License as published by\\n    the P2P Foundation.\\n    \\n    https://wiki.p2pfoundation.net/Peer_Production_License\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    Peer Production License for more details.\\n */\\n\\ncontract Membrane {\\n\\n\\n    address payable[] internal  _members;\\n    address[] internal _parents;\\n    address owner;\\n    string public manifest;                  //IPFS Hash for the JSON containing the manifest of this membrane\\n  \\n    mapping (address => bool) public isMember;      //returns true if an address is a member;\\n    mapping (string => address) public toAddress;   //maps names to addresses\\n    mapping (address => string) public toName;      //maps addresses to names\\n   \\n    event AddedMember (address member, string name);\\n    event RemovedMember (address member, string name);\\n    event ChangedName(string namefrom, string nameto);\\n\\n    constructor ()\\n    {\\n        owner = tx.origin;\\n        \\n    }\\n\\n\\n    // ====================================================\\n    //                      Member Management Functions\\n    //=============================================================\\n    // these function will be used by the membrane owner to mantain the membrane members\\n\\n    function addMember(address  _memberaddress, string memory _membername) virtual\\n        public\\n    {\\n        require((isMember[msg.sender] == true || owner == msg.sender), \\\"Request submitted by a non-member address\\\");\\n        require(isMember[_memberaddress] == false, \\\"Member already added\\\");\\n        require(toAddress[_membername] == address(0), \\\"Name is already taken\\\");\\n        _members.push(payable(_memberaddress));\\n        toName[_memberaddress] = _membername;\\n        toAddress[_membername] = _memberaddress;\\n        isMember[_memberaddress] = true;\\n        \\n        // call addParent function of the new member so that it can add this membrane as a parent\\n        // detect if the contract has the function addParent\\n\\n        bool success;\\n        bytes memory data;\\n        (success, data) = _memberaddress.staticcall(\\n            abi.encodeWithSignature(\\\"addParent(address)\\\", address(this))\\n        );\\n\\n        if (success) {\\n            (success,) = _memberaddress.call(\\n                    abi.encodeWithSignature(\\\"addParent(address)\\\", address(this))\\n                    );\\n            require (success, \\\"Failed to create parent\\\");\\n        }\\n       \\n        emit AddedMember(_memberaddress, _membername);\\n    }\\n\\n    function addParent(address  _parentaddress)\\n        public\\n    {\\n        _parents.push(_parentaddress);\\n    }\\n\\n\\n    function removeMember(address _memberaddress)\\n        external\\n    {\\n        require(owner == msg.sender, \\\"Request submitted by a non-member address\\\" );\\n        for (uint256 i = 0; i < _members.length; i++) {\\n            if (_members[i] == _memberaddress) {\\n               _members[i] = _members[_members.length]; //swap position with last member\\n               break;\\n            }\\n        }\\n\\n        _members.pop(); // remove last member\\n        isMember[_memberaddress] = false;\\n\\n        emit RemovedMember(_memberaddress,toName[_memberaddress]);\\n\\n        toAddress[toName[_memberaddress]] = address(0);\\n        toName[_memberaddress] = \\\"\\\";\\n   \\n    }\\n    \\n     /// @dev Changes the name of the member\\n    /// @notice only the lead can call this function\\n    /// @param _address The address of the member\\n    /// @param _name The new name of the member\\n\\n    function changeName(address _address, string memory _name)\\n        public\\n    {\\n        require (_address == msg.sender ||\\n                msg.sender == owner ||\\n                _address == tx.origin ,\\n                \\\"Name change request not sent from member nor owner\\\");\\n        toAddress[_name] = _address;\\n        emit ChangedName(toName[_address], _name);\\n        toName[_address] = _name;\\n    }\\n\\n    /// @dev Changes the owner of the membrane\\n    /// @notice only the owner can call this function\\n    /// @param _address The address of the new owner\\n\\n    function changeOwner(address _address)\\n        public\\n    {\\n        require (msg.sender == owner, \\\"Only owner can change the owner\\\");\\n        owner = _address;\\n    }\\n \\n \\n    \\n    /// @dev Retrieves the index of  members in the membrane\\n    /// @return list of the address of the members\\n\\n    function listMembers()\\n        external\\n        view\\n        returns (address payable[] memory)\\n    {\\n        return _members;\\n    }\\n\\n    /// @dev Retrieves the list of parents of the membrane\\n    /// @return the address of the parents of the membrane\\n\\n    function listParents()\\n        external\\n        view\\n        returns (address[] memory)\\n    {\\n        return _parents;\\n    }\\n\\n    /// @dev Retrieves the size of the membrane\\n    /// @return number of members in the membrane\\n\\n    function getSize()\\n        virtual\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return _members.length; //+ _contributors.length;\\n    }\\n\\n    /// @dev Sets the hash of the latest IPFS manifest for this holon\\n    /// @notice Only the holon owner can change this!\\n    /// @param _IPFSHash The hash of the IPFS manifest\\n\\n    function setManifest(string calldata _IPFSHash)\\n        external\\n    {\\n        require (msg.sender == owner, \\\"Only owner can set the manifest\\\");\\n        manifest = _IPFSHash;\\n    }\\n}\",\"versionPragma\":\"^0.8\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"contracts/Holon.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8;\\n\\n/*\\n    Copyright 2020, Roberto Valenti\\n\\n    This program is free software: you can use it, redistribute it and/or modify\\n    it under the terms of the Peer Production License as published by\\n    the P2P Foundation.\\n    \\n    https://wiki.p2pfoundation.net/Peer_Production_License\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    Peer Production License for more details.\\n */\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IHolonFactory.sol\\\";\\nimport \\\"./Membrane.sol\\\";\\n\\ncontract Holon is Membrane{\\n\\n     //======================== Public holon variables\\n    string public name;                      //The name of the holon\\n    string public version;                   //Version of the holon contract\\n    string public flavor;                    //Type of the holon\\n    address public creator;                  //Link to the holonic parent\\n\\n    //======================== Events\\n    event HolonRewarded (address holon, string token, uint256 amount);    \\n    event MemberRewarded (address member,string token, uint256 amount);\\n    event RewardFailed(address indexed member, address token, uint256 amount);\\n\\n    /// @notice Constructor to create an holon\\n    ///  created the Holon contract, the factory needs to be deployed first\\n\\n\\n    // /// @dev Splits the ERC20 token amount sent to the holon according to the appreciation\\n    // /// @notice If appreciation is not shared, it splits it equally across each member (calling BlanketReward)\\n    //  function reward(address _tokenaddress, uint256 _tokenamount)\\n    //     public\\n    //     payable\\n    //     override\\n    // {\\n    //     bool etherreward;\\n    //     IERC20 token;\\n\\n    //     if (msg.value  > 0 && _tokenaddress == address(0)) {\\n    //         _tokenamount = msg.value;\\n    //         etherreward = true;\\n    //     }\\n    //      else {\\n    //         //Load ERC20 token information\\n    //         token = IERC20(_tokenaddress);\\n    //         require (token.balanceOf(address(this)) >= _tokenamount, \\\"Not enough tokens in the contract\\\");\\n    //     }\\n        \\n    //     uint256  amount;\\n\\n    //     for (uint256 i = 0; i < _members.length; i++) {\\n    //         if (totalappreciation > 0 ) // if any appreciation was shared\\n    //             amount = appreciation[_members[i]] * ( _tokenamount / totalappreciation); //multiply given appreciation with unit reward\\n    //         else\\n    //             amount = _tokenamount / _members.length; //else use blanket unit reward value.\\n\\n    //         if (amount > 0 ){\\n    //             if (etherreward){\\n    //                 (bool success, ) = _members[i].call{value: amount}(\\\"\\\");\\n    //                 require(success, \\\"Transfer failed\\\");\\n    //             }\\n    //             else {\\n    //                 token.transfer(_members[i],amount);\\n    //                 (bool success,) = _members[i].call(\\n    //                 abi.encodeWithSignature(\\\"reward(address,uint256)\\\", _tokenaddress, amount)\\n    //                 );\\n    //                 require(success, \\\"Unable to call the reward function\\\" );\\n    //             }\\n    //             MemberRewarded(_members[i], \\\"ERC20\\\", amount);\\n    //         }\\n    //     }\\n    //     emit HolonRewarded(address(this), \\\"ERC20\\\", _tokenamount);\\n    // }\\n\\n    //=============================================================\\n    //                      Holon Creation, Fork and Merge Functions\\n    //=============================================================\\n    // these function will be used by the holon lead to mantain the holon members\\n    function newHolon(string calldata _flavor, string calldata _name, uint _parameter) external returns (address){\\n        IHolonFactory factory = IHolonFactory(creator);\\n        return factory.newHolon(_flavor, _name, _parameter);\\n        \\n        // (bool success, bytes memory data ) = creator.call(\\n        //             abi.encodeWithSignature(\\\"newHolon(string, uint)\\\", _name, _parameter)\\n        //             );\\n        // emit Response(success, data);\\n        // require (success, \\\"Holon creation failed\\\");\\n    }\\n\\n    // function joinHolon(address _memberaddress, string memory _membername)\\n    //     public\\n    // {\\n    //     require(isMember[_memberaddress] == false, \\\"Member was already added\\\");\\n    //     require(toAddress[_membername] == address(0), \\\"Name is already taken\\\");\\n    //     _members.push(address(uint160(_memberaddress)));\\n    //     toAddress[_membername] = _memberaddress;\\n    //     toName[_memberaddress] = _membername;\\n    //     //isContributor[_memberaddress] = true;\\n\\n    //     //emit Joined(_memberaddress, name);\\n    // }\\n\\n    //This function should be called to respect the holonic peer production license.\\n    // function spork(string memory _holonname){\\n    //    Holon newholon =fork(\\\"newname\\\");\\n    //    newholon.spoon(address(this))\\n    //}\\n\\n    //This function should be called to respect the holonic peer production license.\\n    // function fork(string memory _holonname)\\n    //      public\\n    // {\\n    //      Holon newholon = Holon(factory.newHolon(_holonname));\\n    //      newholon.addMember(address(this),\\\"Initiator\\\"); //Link back to origin\\n    //      this.joinHolon(address(newholon),_holonname); // Link to fork\\n    // }\\n\\n      receive() \\n        external \\n        payable \\n    {\\n        reward(address(0),msg.value);\\n    }\\n   \\n    fallback()\\n        external\\n        payable\\n    {\\n        reward(address(0),msg.value);\\n    }\\n\\n\\n     function reward(address _tokenAddress, uint256 _tokenAmount) public payable virtual {\\n        require(_members.length > 0, \\\"No members to reward\\\");\\n        require(_tokenAmount > 0, \\\"Token amount must be greater than zero\\\");\\n\\n        if (msg.value > 0 && _tokenAddress == address(0)) {\\n            require(_tokenAmount == msg.value, \\\"Ether amount mismatch\\\");\\n            distributeEther(_tokenAmount);\\n        } else {\\n            require(_tokenAddress != address(0), \\\"Invalid token address for ERC20 reward\\\");\\n            distributeERC20(_tokenAddress, _tokenAmount);\\n        }\\n    }\\n\\n    function distributeEther(uint256 _etherAmount) private {\\n        uint256 amountPerMember = _etherAmount / _members.length;\\n        require(amountPerMember > 0, \\\"Insufficient amount for distribution\\\");\\n\\n        for (uint256 i = 0; i < _members.length; i++) {\\n            (bool success, ) = _members[i].call{value: amountPerMember}(\\\"\\\");\\n            require(success, \\\"Ether transfer failed\\\");\\n        }\\n\\n        emit HolonRewarded(address(this), \\\"ETHER\\\", _etherAmount);\\n    }\\n\\n    function distributeERC20(address _tokenAddress, uint256 _tokenAmount) private {\\n        IERC20 token = IERC20(_tokenAddress);\\n        require(token.balanceOf(address(this)) >= _tokenAmount, \\\"Not enough tokens in the contract\\\");\\n\\n        uint256 amountPerMember = _tokenAmount / _members.length;\\n        require(amountPerMember > 0, \\\"Insufficient amount for distribution\\\");\\n\\n        for (uint256 i = 0; i < _members.length; i++) {\\n            require(token.transfer(_members[i], amountPerMember), \\\"ERC20 transfer failed\\\");\\n        }\\n\\n        emit HolonRewarded(address(this), \\\"ERC20\\\", _tokenAmount);\\n    }\\n}\",\"versionPragma\":\"^0.8\"},\"contracts/Appreciative.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8;\\n\\n/*\\n    Copyright 2020, Roberto Valenti\\n\\n    This program is free software: you can use it, redistribute it and/or modify\\n    it under the terms of the Peer Production License as published by\\n    the P2P Foundation.\\n    \\n    https://wiki.p2pfoundation.net/Peer_Production_License\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    Peer Production License for more details.\\n */\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./Holon.sol\\\";\\n\\ncontract Appreciative is Holon  {\\n\\n    //======================== Structures for tracking appreciation\\n    uint256 public totalappreciation;               // max amount of appreciation in this holon\\n    mapping (address => uint256) public appreciation; //appreciaton received by a member\\n    mapping (address => uint8) public remainingappreciation; //appreciation left to give (max=100)\\n\\n    constructor (address _creator, string  memory _name)\\n    {\\n        name = _name;\\n        creator = _creator;\\n        flavor = \\\"Appreciative\\\";\\n        totalappreciation = 0;\\n    }\\n\\n      //=============================================================\\n    //                      Appreciative Functions\\n    //=============================================================\\n    //  these function are called to signal appreciation to others\\n\\n    /// @dev Gives a percentage of appreciation to a specific member\\n    /// @notice Only the holon members (not contributors) can call this function\\n    /// @notice A member cannot send appreciation to himself\\n    /// @notice Sender should have enough appreciation left to give\\n    /// @param _memberaddress The address of the receiving member\\n    /// @param _percentage The amount of the appreciation to give in percentage.\\n\\n    function appreciate(address _memberaddress, uint8 _percentage)\\n        external\\n    {\\n        require (isMember[msg.sender] || isMember[_memberaddress], \\\"Sender or Receiver is not a member\\\");\\n        require (_memberaddress != msg.sender, \\\"Sender cannot appreciate himself.. that's selfish\\\"); // sender can't vote for himself.\\n        require (remainingappreciation[msg.sender] >= _percentage, \\\"Not enough appreciation remaining\\\");\\n        remainingappreciation[msg.sender] -= _percentage;\\n        appreciation[_memberaddress] += _percentage;\\n        totalappreciation += _percentage;\\n    }\\n\\n    /// @dev Gives a percentage of appreciation to a specific member\\n    /// @notice Only the holon members can call this function\\n    /// @notice A member cannot send appreciation to himself\\n    /// @notice Sender should have enough appreciation left to give in parent\\n    /// @param _parent The address of the receiving member\\n    /// @param _sibling The address of the receiving member\\n    /// @param _percentage The amount of the appreciation to give in percentage.\\n\\n    function appreciateSibling(address _parent, address _sibling, uint8 _percentage)\\n        external\\n    {\\n        require (msg.sender == owner,\\\"Only lead can perform this action\\\");\\n        Appreciative(payable(_parent)).appreciate(_sibling,_percentage);\\n    }\\n\\n    /// @dev Sets appreciation for a group of members\\n    /// @notice This is the only way to change already assigned appreciation\\n    function setAppreciation(address[] memory _memberaddress, uint8[] memory _percentage)\\n        external\\n    {\\n        require(_memberaddress.length == _percentage.length, \\\"Array length mismatch\\\");\\n        totalappreciation = 0;\\n         for (uint256 i = 0; i < _memberaddress.length; i++) {\\n             appreciation[_memberaddress[i]] = _percentage[i];\\n             remainingappreciation[_memberaddress[i]] -= _percentage[i];\\n             totalappreciation += _percentage[i];\\n         }\\n    }\\n\\n   /// @dev Resets appreciation of the caller\\n    /// @notice This is the only way to change already assigned appreciation\\n    function resetAppreciation()\\n        external\\n    {\\n        require(msg.sender == owner, \\\"Only the lead can reset appreciation\\\");\\n        totalappreciation = 0;\\n         for (uint256 i = 0; i < _members.length; i++) {\\n             address _memberaddress = _members[i];\\n             remainingappreciation[_memberaddress] = 100;\\n             appreciation[_memberaddress] = 0;\\n         }\\n    }\\n\\n    function addMember(address  _memberaddress, string memory _membername) \\n         public override\\n    {\\n        super.addMember(_memberaddress,_membername);\\n        remainingappreciation[_memberaddress] = 100;\\n    }\\n\\n    function reward(address _tokenaddress, uint256 _tokenamount)\\n        public\\n        payable\\n        override\\n    {\\n        bool etherreward;\\n        IERC20 token;\\n\\n        if (msg.value  > 0 && _tokenaddress == address(0)) {\\n            _tokenamount = msg.value;\\n            etherreward = true;\\n        }\\n         else {\\n            //Load ERC20 token information\\n            token = IERC20(_tokenaddress);\\n            require (token.balanceOf(address(this)) >= _tokenamount, \\\"Not enough tokens in the contract\\\");\\n        }\\n        \\n        uint256  amount;\\n\\n        for (uint256 i = 0; i < _members.length; i++) {\\n            if (totalappreciation > 0 ) // if any appreciation was shared\\n                amount = (appreciation[_members[i]] * _tokenamount) / totalappreciation; //multiply given appreciation with unit reward\\n            else\\n                amount = _tokenamount /_members.length ; //else use blanket unit reward value.\\n\\n            if (amount > 0 ){\\n                if (etherreward){\\n                    (bool success, ) = _members[i].call{value: amount}(\\\"\\\");\\n                    require(success, \\\"Transfer failed\\\");\\n                }\\n                else {\\n                    token.transfer(_members[i],amount);\\n                    (bool success,) = _members[i].call(\\n                    abi.encodeWithSignature(\\\"reward(address,uint256)\\\", _tokenaddress, amount)\\n                    );\\n                    require(success, \\\"Unable to call the reward function\\\" );\\n                }\\n                // MemberRewarded(_members[i], \\\"ERC20\\\", amount); TODO\\n            }\\n        }\\n       // emit HolonRewarded(address(this), \\\"ERC20\\\", _tokenamount);TODO\\n    }\\n   \\n}\\n\",\"versionPragma\":\"^0.8\"}}}","address":"0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512","bytecode":"0x608060405234801561001057600080fd5b50612d36806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80637e4115ba14610051578063dfee57171461007a578063e43cb2701461009a578063e5c23374146100ad575b600080fd5b61006461005f36600461048c565b6100b5565b6040516100719190610552565b60405180910390f35b61008d61008836600461045e565b6100db565b604051610071919061058a565b6100646100a83660046104c7565b61014f565b61008d610348565b80516020818301810180516001825292820191909301209152546001600160a01b031681565b6001600160a01b0381166000908152602081815260409182902080548351818402810184019094528084526060939283018282801561014357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610125575b50505050509050919050565b6000806001600160a01b031660018460405161016b9190610536565b908152604051908190036020019020546001600160a01b031611156101ba5760018360405161019a9190610536565b908152604051908190036020019020546001600160a01b03169050610342565b600030846040516101ca906103d0565b6101d5929190610566565b604051809103906000f0801580156101f1573d6000803e3d6000fd5b50600060208181527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5805460018181019092557ff0df3dcda05b4fbd9c655cde3d5ceb211e019e72ec816e127a59e7195f2cd7f50180546001600160a01b0386166001600160a01b03199182168117909255338086526040862080549485018155865293909420909101805490931617909155909150819032146102c657326000908152602081815260408220805460018101825590835291200180546001600160a01b0319166001600160a01b0383161790555b806001866040516102d79190610536565b90815260405190819003602001812080546001600160a01b03939093166001600160a01b0319909316929092179091557f10d047031611691941b661f2160741619b4030812eb79997f4b3734ed5605a439061033690879084906105d7565b60405180910390a19150505b92915050565b600080805260209081527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb580546040805182850281018501909152818152606093909291908301828280156103c657602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116103a8575b5050505050905090565b6126b98061064883390190565b600082601f8301126103ed578081fd5b813567ffffffffffffffff8082111561040857610408610631565b604051601f8301601f19168101602001828111828210171561042c5761042c610631565b604052828152848301602001861015610443578384fd5b82602086016020830137918201602001929092529392505050565b60006020828403121561046f578081fd5b81356001600160a01b0381168114610485578182fd5b9392505050565b60006020828403121561049d578081fd5b813567ffffffffffffffff8111156104b3578182fd5b6104bf848285016103dd565b949350505050565b600080604083850312156104d9578081fd5b823567ffffffffffffffff8111156104ef578182fd5b6104fb858286016103dd565b95602094909401359450505050565b60008151808452610522816020860160208601610601565b601f01601f19169290920160200192915050565b60008251610548818460208701610601565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b03831681526040602082018190526000906104bf9083018461050a565b6020808252825182820181905260009190848201906040850190845b818110156105cb5783516001600160a01b0316835292840192918401916001016105a6565b50909695505050505050565b6000604082526105ea604083018561050a565b905060018060a01b03831660208301529392505050565b60005b8381101561061c578181015183820152602001610604565b8381111561062b576000848401525b50505050565b634e487b7160e01b600052604160045260246000fdfe60806040523480156200001157600080fd5b50604051620026b9380380620026b9833981016040819052620000349162000160565b600280546001600160a01b0319163217905580516200005b906007906020840190620000ba565b50600a80546001600160a01b0319166001600160a01b03841617905560408051808201909152600c8082526b41707072656369617469766560a01b6020909201918252620000ac91600991620000ba565b50506000600b5550620002a5565b828054620000c89062000252565b90600052602060002090601f016020900481019282620000ec576000855562000137565b82601f106200010757805160ff191683800117855562000137565b8280016001018555821562000137579182015b82811115620001375782518255916020019190600101906200011a565b506200014592915062000149565b5090565b5b808211156200014557600081556001016200014a565b6000806040838503121562000173578182fd5b82516001600160a01b03811681146200018a578283fd5b602084810151919350906001600160401b0380821115620001a9578384fd5b818601915086601f830112620001bd578384fd5b815181811115620001d257620001d26200028f565b604051601f8201601f1916810185018381118282101715620001f857620001f86200028f565b60405281815283820185018910156200020f578586fd5b8592505b8183101562000232578383018501518184018601529184019162000213565b818311156200024357858583830101525b80955050505050509250929050565b6002810460018216806200026757607f821691505b602082108114156200028957634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b61240480620002b56000396000f3fe6080604052600436106101855760003560e01c8063a6f9dae1116100d1578063c127c2471161008a578063de8fa43111610064578063de8fa43114610452578063f59e4f6514610467578063f5baf0d71461047c578063ff4616431461049157610197565b8063c127c247146103f2578063cf1327bc14610412578063d39801031461043257610197565b8063a6f9dae11461033b578063acf36e531461035b578063b062e5601461037b578063b6afd2ca1461039b578063b766f86f146103b0578063b9e78f8f146103d257610197565b80633113a2ae1161013e57806362278f1c1161011857806362278f1c146102b95780637e4115ba146102ce57806381bc3f8c146102ee578063a230c5241461030e57610197565b80633113a2ae1461026257806345ca25ed1461028457806354fd4d50146102a457610197565b806302d05d3f146101a257806306fdde03146101cd5780630b1ca49a146101ef5780630babba861461020f57806321670f221461022f57806329b84d091461024257610197565b36610197576101956000346104be565b005b6101956000346104be565b3480156101ae57600080fd5b506101b7610898565b6040516101c49190611cf3565b60405180910390f35b3480156101d957600080fd5b506101e26108a7565b6040516101c49190611e16565b3480156101fb57600080fd5b5061019561020a36600461188c565b610935565b34801561021b57600080fd5b506101b761022a366004611ad4565b610afc565b61019561023d36600461195f565b6104be565b34801561024e57600080fd5b5061019561025d366004611a94565b610b94565b34801561026e57600080fd5b50610277610bcf565b6040516101c49190611d84565b34801561029057600080fd5b5061019561029f366004611911565b610c31565b3480156102b057600080fd5b506101e2610d2b565b3480156102c557600080fd5b50610195610d38565b3480156102da57600080fd5b506101b76102e9366004611b45565b610de1565b3480156102fa57600080fd5b506101e261030936600461188c565b610e07565b34801561031a57600080fd5b5061032e61032936600461188c565b610e20565b6040516101c49190611dd1565b34801561034757600080fd5b5061019561035636600461188c565b610e35565b34801561036757600080fd5b5061019561037636600461188c565b610e81565b34801561038757600080fd5b506101956103963660046119be565b610ed2565b3480156103a757600080fd5b5061027761107a565b3480156103bc57600080fd5b506103c56110da565b6040516101c49190612228565b3480156103de57600080fd5b506101956103ed36600461198a565b6110e0565b3480156103fe57600080fd5b5061019561040d366004611911565b611227565b34801561041e57600080fd5b5061019561042d3660046118cb565b611256565b34801561043e57600080fd5b506103c561044d36600461188c565b6112e5565b34801561045e57600080fd5b506103c56112f7565b34801561047357600080fd5b506101e26112fd565b34801561048857600080fd5b506101e261130a565b34801561049d57600080fd5b506104b16104ac36600461188c565b611317565b6040516101c49190612231565b6000806000341180156104d857506001600160a01b038416155b156104e95734925060019150610591565b506040516370a0823160e01b8152839083906001600160a01b038316906370a082319061051a903090600401611cf3565b60206040518083038186803b15801561053257600080fd5b505afa158015610546573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056a9190611b80565b10156105915760405162461bcd60e51b8152600401610588906120fb565b60405180910390fd5b6000805b60005481101561089057600b541561060f57600b5485600c60008085815481106105cf57634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b031683528201929092526040019020546105fe91906122c5565b61060891906122a5565b915061061f565b60005461061c90866122a5565b91505b811561087e5783156106dc57600080828154811061064d57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546040516001600160a01b0390911690849061067390611cf0565b60006040518083038185875af1925050503d80600081146106b0576040519150601f19603f3d011682016040523d82523d6000602084013e6106b5565b606091505b50509050806106d65760405162461bcd60e51b815260040161058890611e86565b5061087e565b826001600160a01b031663a9059cbb6000838154811061070c57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546040516001600160e01b031960e084901b168152610744916001600160a01b0316908690600401611d07565b602060405180830381600087803b15801561075e57600080fd5b505af1158015610772573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107969190611a74565b5060008082815481106107b957634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546040516001600160a01b03909116906107e49089908690602401611d07565b60408051601f198184030181529181526020820180516001600160e01b03166310b3879160e11b179052516108199190611c65565b6000604051808303816000865af19150503d8060008114610856576040519150601f19603f3d011682016040523d82523d6000602084013e61085b565b606091505b505090508061087c5760405162461bcd60e51b815260040161058890611f27565b505b8061088881612372565b915050610595565b505050505050565b600a546001600160a01b031681565b600780546108b490612337565b80601f01602080910402602001604051908101604052809291908181526020018280546108e090612337565b801561092d5780601f106109025761010080835404028352916020019161092d565b820191906000526020600020905b81548152906001019060200180831161091057829003601f168201915b505050505081565b6002546001600160a01b0316331461095f5760405162461bcd60e51b8152600401610588906121df565b60005b6000548110156109de57816001600160a01b03166000828154811061099757634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b031614156109cc5760008054634e487b7160e01b600052603260045260246000fd5b806109d681612372565b915050610962565b5060008054806109fe57634e487b7160e01b600052603160045260246000fd5b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b0383168252600481526040808320805460ff1916905560069091529081902090517f982d6fac85d22cbbe833f9fe4278a909ca0f3b24ecc8b1f10fe63736e3c7231391610a7a91849190611d44565b60405180910390a16001600160a01b0381166000908152600660205260408082209051600591610aa991611c81565b908152604080516020928190038301812080546001600160a01b0319166001600160a01b0395861617905582810180835260008083529486168552600690935292209151610af8929190611644565b5050565b600a546040516305d5dd4360e11b81526000916001600160a01b0316908190630babba8690610b37908a908a908a908a908a90600401611ddc565b602060405180830381600087803b158015610b5157600080fd5b505af1158015610b65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8991906118af565b979650505050505050565b6002546001600160a01b03163314610bbe5760405162461bcd60e51b815260040161058890611fee565b610bca600383836116c8565b505050565b60606001805480602002602001604051908101604052809291908181526020018280548015610c2757602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610c09575b5050505050905090565b6001600160a01b038216331480610c5257506002546001600160a01b031633145b80610c6557506001600160a01b03821632145b610c815760405162461bcd60e51b81526004016105889061218d565b81600582604051610c929190611c65565b908152604080516020928190038301812080546001600160a01b0319166001600160a01b039586161790559285166000908152600690925290207ffdcc9059d3426f73949b49e5d977553aa298184439da800d66f48959d9cc76b091610cfa91908490611e29565b60405180910390a16001600160a01b03821660009081526006602090815260409091208251610bca92840190611644565b600880546108b490612337565b6002546001600160a01b03163314610d625760405162461bcd60e51b815260040161058890611f69565b6000600b8190555b600054811015610dde576000808281548110610d9657634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b03168252600d81526040808320805460ff19166064179055600c9091528120555080610dd681612372565b915050610d6a565b50565b80516020818301810180516005825292820191909301209152546001600160a01b031681565b600660205260009081526040902080546108b490612337565b60046020526000908152604090205460ff1681565b6002546001600160a01b03163314610e5f5760405162461bcd60e51b815260040161058890612054565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6001805480820182556000919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180546001600160a01b0319166001600160a01b0392909216919091179055565b8051825114610ef35760405162461bcd60e51b815260040161058890611e57565b6000600b8190555b8251811015610bca57818181518110610f2457634e487b7160e01b600052603260045260246000fd5b602002602001015160ff16600c6000858481518110610f5357634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002081905550818181518110610f9f57634e487b7160e01b600052603260045260246000fd5b6020026020010151600d6000858481518110610fcb57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060008282829054906101000a900460ff1661100e91906122e4565b92506101000a81548160ff021916908360ff16021790555081818151811061104657634e487b7160e01b600052603260045260246000fd5b602002602001015160ff16600b6000828254611062919061228d565b9091555081905061107281612372565b915050610efb565b60606000805480602002602001604051908101604052809291908181526020018280548015610c27576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610c09575050505050905090565b600b5481565b3360009081526004602052604090205460ff168061111657506001600160a01b03821660009081526004602052604090205460ff165b6111325760405162461bcd60e51b8152600401610588906120b9565b6001600160a01b03821633141561115b5760405162461bcd60e51b81526004016105889061213c565b336000908152600d602052604090205460ff808316911610156111905760405162461bcd60e51b815260040161058890611ee6565b336000908152600d6020526040812080548392906111b290849060ff166122e4565b92506101000a81548160ff021916908360ff1602179055508060ff16600c6000846001600160a01b03166001600160a01b031681526020019081526020016000206000828254611202919061228d565b925050819055508060ff16600b600082825461121e919061228d565b90915550505050565b611231828261132c565b506001600160a01b03166000908152600d60205260409020805460ff19166064179055565b6002546001600160a01b031633146112805760405162461bcd60e51b815260040161058890611fad565b60405163b9e78f8f60e01b81526001600160a01b0384169063b9e78f8f906112ae9085908590600401611d68565b600060405180830381600087803b1580156112c857600080fd5b505af11580156112dc573d6000803e3d6000fd5b50505050505050565b600c6020526000908152604090205481565b60005490565b600980546108b490612337565b600380546108b490612337565b600d6020526000908152604090205460ff1681565b3360009081526004602052604090205460ff1615156001148061135957506002546001600160a01b031633145b6113755760405162461bcd60e51b8152600401610588906121df565b6001600160a01b03821660009081526004602052604090205460ff16156113ae5760405162461bcd60e51b81526004016105889061208b565b60006001600160a01b03166005826040516113c99190611c65565b908152604051908190036020019020546001600160a01b0316146113ff5760405162461bcd60e51b815260040161058890612025565b600080546001810182557f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5630180546001600160a01b0319166001600160a01b0385169081179091558152600660209081526040909120825161146392840190611644565b50816005826040516114759190611c65565b90815260408051918290036020908101832080546001600160a01b039586166001600160a01b031990911617905592851660008181526004909452908320805460ff191660011790556060916114cf903090602401611cf3565b60408051601f198184030181529181526020820180516001600160e01b031663acf36e5360e01b179052516115049190611c65565b600060405180830381855afa9150503d806000811461153f576040519150601f19603f3d011682016040523d82523d6000602084013e611544565b606091505b509092509050811561160557836001600160a01b03163060405160240161156b9190611cf3565b60408051601f198184030181529181526020820180516001600160e01b031663acf36e5360e01b179052516115a09190611c65565b6000604051808303816000865af19150503d80600081146115dd576040519150601f19603f3d011682016040523d82523d6000602084013e6115e2565b606091505b505080925050816116055760405162461bcd60e51b815260040161058890611eaf565b7f7c803c00251fe8138e27cfa8286be8d98625e5f6476ca6ca594f682362b711208484604051611636929190611d20565b60405180910390a150505050565b82805461165090612337565b90600052602060002090601f01602090048101928261167257600085556116b8565b82601f1061168b57805160ff19168380011785556116b8565b828001600101855582156116b8579182015b828111156116b857825182559160200191906001019061169d565b506116c492915061173c565b5090565b8280546116d490612337565b90600052602060002090601f0160209004810192826116f657600085556116b8565b82601f1061170f5782800160ff198235161785556116b8565b828001600101855582156116b8579182015b828111156116b8578235825591602001919060010190611721565b5b808211156116c4576000815560010161173d565b600082601f830112611761578081fd5b8135602061177661177183612269565b61223f565b8281528181019085830183850287018401881015611792578586fd5b855b858110156117b7576117a582611876565b84529284019290840190600101611794565b5090979650505050505050565b60008083601f8401126117d5578182fd5b50813567ffffffffffffffff8111156117ec578182fd5b60208301915083602082850101111561180457600080fd5b9250929050565b600082601f83011261181b578081fd5b813567ffffffffffffffff811115611835576118356123a3565b611848601f8201601f191660200161223f565b81815284602083860101111561185c578283fd5b816020850160208301379081016020019190915292915050565b803560ff8116811461188757600080fd5b919050565b60006020828403121561189d578081fd5b81356118a8816123b9565b9392505050565b6000602082840312156118c0578081fd5b81516118a8816123b9565b6000806000606084860312156118df578182fd5b83356118ea816123b9565b925060208401356118fa816123b9565b915061190860408501611876565b90509250925092565b60008060408385031215611923578182fd5b823561192e816123b9565b9150602083013567ffffffffffffffff811115611949578182fd5b6119558582860161180b565b9150509250929050565b60008060408385031215611971578182fd5b823561197c816123b9565b946020939093013593505050565b6000806040838503121561199c578182fd5b82356119a7816123b9565b91506119b560208401611876565b90509250929050565b600080604083850312156119d0578182fd5b823567ffffffffffffffff808211156119e7578384fd5b818501915085601f8301126119fa578384fd5b81356020611a0a61177183612269565b82815281810190858301838502870184018b1015611a26578889fd5b8896505b84871015611a51578035611a3d816123b9565b835260019690960195918301918301611a2a565b5096505086013592505080821115611a67578283fd5b5061195585828601611751565b600060208284031215611a85578081fd5b815180151581146118a8578182fd5b60008060208385031215611aa6578182fd5b823567ffffffffffffffff811115611abc578283fd5b611ac8858286016117c4565b90969095509350505050565b600080600080600060608688031215611aeb578081fd5b853567ffffffffffffffff80821115611b02578283fd5b611b0e89838a016117c4565b90975095506020880135915080821115611b26578283fd5b50611b33888289016117c4565b96999598509660400135949350505050565b600060208284031215611b56578081fd5b813567ffffffffffffffff811115611b6c578182fd5b611b788482850161180b565b949350505050565b600060208284031215611b91578081fd5b5051919050565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b60008151808452611bda816020860160208601612307565b601f01601f19169290920160200192915050565b60008154611bfb81612337565b808552602060018381168015611c185760018114611c2c57611c5a565b60ff19851688840152604088019550611c5a565b866000528260002060005b85811015611c525781548a8201860152908301908401611c37565b890184019650505b505050505092915050565b60008251611c77818460208701612307565b9190910192915050565b6000808354611c8f81612337565b60018281168015611ca75760018114611cb857611ce4565b60ff19841687528287019450611ce4565b8786526020808720875b85811015611cdb5781548a820152908401908201611cc2565b50505082870194505b50929695505050505050565b90565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0383168152604060208201819052600090611b7890830184611bc2565b6001600160a01b0383168152604060208201819052600090611b7890830184611bee565b6001600160a01b0392909216825260ff16602082015260400190565b6020808252825182820181905260009190848201906040850190845b81811015611dc55783516001600160a01b031683529284019291840191600101611da0565b50909695505050505050565b901515815260200190565b600060608252611df0606083018789611b98565b8281036020840152611e03818688611b98565b9150508260408301529695505050505050565b6000602082526118a86020830184611bc2565b600060408252611e3c6040830185611bee565b8281036020840152611e4e8185611bc2565b95945050505050565b602080825260159082015274082e4e4c2f240d8cadccee8d040dad2e6dac2e8c6d605b1b604082015260600190565b6020808252600f908201526e151c985b9cd9995c8819985a5b1959608a1b604082015260600190565b60208082526017908201527f4661696c656420746f2063726561746520706172656e74000000000000000000604082015260600190565b60208082526021908201527f4e6f7420656e6f75676820617070726563696174696f6e2072656d61696e696e6040820152606760f81b606082015260800190565b60208082526022908201527f556e61626c6520746f2063616c6c20746865207265776172642066756e63746960408201526137b760f11b606082015260800190565b60208082526024908201527f4f6e6c7920746865206c6561642063616e2072657365742061707072656369616040820152633a34b7b760e11b606082015260800190565b60208082526021908201527f4f6e6c79206c6561642063616e20706572666f726d207468697320616374696f6040820152603760f91b606082015260800190565b6020808252601f908201527f4f6e6c79206f776e65722063616e2073657420746865206d616e696665737400604082015260600190565b6020808252601590820152742730b6b29034b99030b63932b0b23c903a30b5b2b760591b604082015260600190565b6020808252601f908201527f4f6e6c79206f776e65722063616e206368616e676520746865206f776e657200604082015260600190565b60208082526014908201527313595b58995c88185b1c9958591e48185919195960621b604082015260600190565b60208082526022908201527f53656e646572206f72205265636569766572206973206e6f742061206d656d6260408201526132b960f11b606082015260800190565b60208082526021908201527f4e6f7420656e6f75676820746f6b656e7320696e2074686520636f6e747261636040820152601d60fa1b606082015260800190565b60208082526031908201527f53656e6465722063616e6e6f7420617070726563696174652068696d73656c6660408201527005c5c40e8d0c2e84ee640e6cad8ccd2e6d607b1b606082015260800190565b60208082526032908201527f4e616d65206368616e67652072657175657374206e6f742073656e742066726f604082015271369036b2b6b132b9103737b91037bbb732b960711b606082015260800190565b60208082526029908201527f52657175657374207375626d69747465642062792061206e6f6e2d6d656d626560408201526872206164647265737360b81b606082015260800190565b90815260200190565b60ff91909116815260200190565b60405181810167ffffffffffffffff81118282101715612261576122616123a3565b604052919050565b600067ffffffffffffffff821115612283576122836123a3565b5060209081020190565b600082198211156122a0576122a061238d565b500190565b6000826122c057634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156122df576122df61238d565b500290565b600060ff821660ff8416808210156122fe576122fe61238d565b90039392505050565b60005b8381101561232257818101518382015260200161230a565b83811115612331576000848401525b50505050565b60028104600182168061234b57607f821691505b6020821081141561236c57634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156123865761238661238d565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610dde57600080fdfea2646970667358221220a8efbe2a93fbfe5c91edac961dea7e68c7eebe759d874b690ff1e8dd7a1b9b9b64736f6c63430008000033a2646970667358221220a70129e03c8f2ba06cf747fe66d1368ad43ac2de543f2a7d3c7df55b55c1cdbb64736f6c63430008000033","deployedBytecode":"0x608060405234801561001057600080fd5b506004361061004c5760003560e01c80637e4115ba14610051578063dfee57171461007a578063e43cb2701461009a578063e5c23374146100ad575b600080fd5b61006461005f36600461048c565b6100b5565b6040516100719190610552565b60405180910390f35b61008d61008836600461045e565b6100db565b604051610071919061058a565b6100646100a83660046104c7565b61014f565b61008d610348565b80516020818301810180516001825292820191909301209152546001600160a01b031681565b6001600160a01b0381166000908152602081815260409182902080548351818402810184019094528084526060939283018282801561014357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610125575b50505050509050919050565b6000806001600160a01b031660018460405161016b9190610536565b908152604051908190036020019020546001600160a01b031611156101ba5760018360405161019a9190610536565b908152604051908190036020019020546001600160a01b03169050610342565b600030846040516101ca906103d0565b6101d5929190610566565b604051809103906000f0801580156101f1573d6000803e3d6000fd5b50600060208181527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5805460018181019092557ff0df3dcda05b4fbd9c655cde3d5ceb211e019e72ec816e127a59e7195f2cd7f50180546001600160a01b0386166001600160a01b03199182168117909255338086526040862080549485018155865293909420909101805490931617909155909150819032146102c657326000908152602081815260408220805460018101825590835291200180546001600160a01b0319166001600160a01b0383161790555b806001866040516102d79190610536565b90815260405190819003602001812080546001600160a01b03939093166001600160a01b0319909316929092179091557f10d047031611691941b661f2160741619b4030812eb79997f4b3734ed5605a439061033690879084906105d7565b60405180910390a19150505b92915050565b600080805260209081527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb580546040805182850281018501909152818152606093909291908301828280156103c657602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116103a8575b5050505050905090565b6126b98061064883390190565b600082601f8301126103ed578081fd5b813567ffffffffffffffff8082111561040857610408610631565b604051601f8301601f19168101602001828111828210171561042c5761042c610631565b604052828152848301602001861015610443578384fd5b82602086016020830137918201602001929092529392505050565b60006020828403121561046f578081fd5b81356001600160a01b0381168114610485578182fd5b9392505050565b60006020828403121561049d578081fd5b813567ffffffffffffffff8111156104b3578182fd5b6104bf848285016103dd565b949350505050565b600080604083850312156104d9578081fd5b823567ffffffffffffffff8111156104ef578182fd5b6104fb858286016103dd565b95602094909401359450505050565b60008151808452610522816020860160208601610601565b601f01601f19169290920160200192915050565b60008251610548818460208701610601565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b03831681526040602082018190526000906104bf9083018461050a565b6020808252825182820181905260009190848201906040850190845b818110156105cb5783516001600160a01b0316835292840192918401916001016105a6565b50909695505050505050565b6000604082526105ea604083018561050a565b905060018060a01b03831660208301529392505050565b60005b8381101561061c578181015183820152602001610604565b8381111561062b576000848401525b50505050565b634e487b7160e01b600052604160045260246000fdfe60806040523480156200001157600080fd5b50604051620026b9380380620026b9833981016040819052620000349162000160565b600280546001600160a01b0319163217905580516200005b906007906020840190620000ba565b50600a80546001600160a01b0319166001600160a01b03841617905560408051808201909152600c8082526b41707072656369617469766560a01b6020909201918252620000ac91600991620000ba565b50506000600b5550620002a5565b828054620000c89062000252565b90600052602060002090601f016020900481019282620000ec576000855562000137565b82601f106200010757805160ff191683800117855562000137565b8280016001018555821562000137579182015b82811115620001375782518255916020019190600101906200011a565b506200014592915062000149565b5090565b5b808211156200014557600081556001016200014a565b6000806040838503121562000173578182fd5b82516001600160a01b03811681146200018a578283fd5b602084810151919350906001600160401b0380821115620001a9578384fd5b818601915086601f830112620001bd578384fd5b815181811115620001d257620001d26200028f565b604051601f8201601f1916810185018381118282101715620001f857620001f86200028f565b60405281815283820185018910156200020f578586fd5b8592505b8183101562000232578383018501518184018601529184019162000213565b818311156200024357858583830101525b80955050505050509250929050565b6002810460018216806200026757607f821691505b602082108114156200028957634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b61240480620002b56000396000f3fe6080604052600436106101855760003560e01c8063a6f9dae1116100d1578063c127c2471161008a578063de8fa43111610064578063de8fa43114610452578063f59e4f6514610467578063f5baf0d71461047c578063ff4616431461049157610197565b8063c127c247146103f2578063cf1327bc14610412578063d39801031461043257610197565b8063a6f9dae11461033b578063acf36e531461035b578063b062e5601461037b578063b6afd2ca1461039b578063b766f86f146103b0578063b9e78f8f146103d257610197565b80633113a2ae1161013e57806362278f1c1161011857806362278f1c146102b95780637e4115ba146102ce57806381bc3f8c146102ee578063a230c5241461030e57610197565b80633113a2ae1461026257806345ca25ed1461028457806354fd4d50146102a457610197565b806302d05d3f146101a257806306fdde03146101cd5780630b1ca49a146101ef5780630babba861461020f57806321670f221461022f57806329b84d091461024257610197565b36610197576101956000346104be565b005b6101956000346104be565b3480156101ae57600080fd5b506101b7610898565b6040516101c49190611cf3565b60405180910390f35b3480156101d957600080fd5b506101e26108a7565b6040516101c49190611e16565b3480156101fb57600080fd5b5061019561020a36600461188c565b610935565b34801561021b57600080fd5b506101b761022a366004611ad4565b610afc565b61019561023d36600461195f565b6104be565b34801561024e57600080fd5b5061019561025d366004611a94565b610b94565b34801561026e57600080fd5b50610277610bcf565b6040516101c49190611d84565b34801561029057600080fd5b5061019561029f366004611911565b610c31565b3480156102b057600080fd5b506101e2610d2b565b3480156102c557600080fd5b50610195610d38565b3480156102da57600080fd5b506101b76102e9366004611b45565b610de1565b3480156102fa57600080fd5b506101e261030936600461188c565b610e07565b34801561031a57600080fd5b5061032e61032936600461188c565b610e20565b6040516101c49190611dd1565b34801561034757600080fd5b5061019561035636600461188c565b610e35565b34801561036757600080fd5b5061019561037636600461188c565b610e81565b34801561038757600080fd5b506101956103963660046119be565b610ed2565b3480156103a757600080fd5b5061027761107a565b3480156103bc57600080fd5b506103c56110da565b6040516101c49190612228565b3480156103de57600080fd5b506101956103ed36600461198a565b6110e0565b3480156103fe57600080fd5b5061019561040d366004611911565b611227565b34801561041e57600080fd5b5061019561042d3660046118cb565b611256565b34801561043e57600080fd5b506103c561044d36600461188c565b6112e5565b34801561045e57600080fd5b506103c56112f7565b34801561047357600080fd5b506101e26112fd565b34801561048857600080fd5b506101e261130a565b34801561049d57600080fd5b506104b16104ac36600461188c565b611317565b6040516101c49190612231565b6000806000341180156104d857506001600160a01b038416155b156104e95734925060019150610591565b506040516370a0823160e01b8152839083906001600160a01b038316906370a082319061051a903090600401611cf3565b60206040518083038186803b15801561053257600080fd5b505afa158015610546573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056a9190611b80565b10156105915760405162461bcd60e51b8152600401610588906120fb565b60405180910390fd5b6000805b60005481101561089057600b541561060f57600b5485600c60008085815481106105cf57634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b031683528201929092526040019020546105fe91906122c5565b61060891906122a5565b915061061f565b60005461061c90866122a5565b91505b811561087e5783156106dc57600080828154811061064d57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546040516001600160a01b0390911690849061067390611cf0565b60006040518083038185875af1925050503d80600081146106b0576040519150601f19603f3d011682016040523d82523d6000602084013e6106b5565b606091505b50509050806106d65760405162461bcd60e51b815260040161058890611e86565b5061087e565b826001600160a01b031663a9059cbb6000838154811061070c57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546040516001600160e01b031960e084901b168152610744916001600160a01b0316908690600401611d07565b602060405180830381600087803b15801561075e57600080fd5b505af1158015610772573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107969190611a74565b5060008082815481106107b957634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546040516001600160a01b03909116906107e49089908690602401611d07565b60408051601f198184030181529181526020820180516001600160e01b03166310b3879160e11b179052516108199190611c65565b6000604051808303816000865af19150503d8060008114610856576040519150601f19603f3d011682016040523d82523d6000602084013e61085b565b606091505b505090508061087c5760405162461bcd60e51b815260040161058890611f27565b505b8061088881612372565b915050610595565b505050505050565b600a546001600160a01b031681565b600780546108b490612337565b80601f01602080910402602001604051908101604052809291908181526020018280546108e090612337565b801561092d5780601f106109025761010080835404028352916020019161092d565b820191906000526020600020905b81548152906001019060200180831161091057829003601f168201915b505050505081565b6002546001600160a01b0316331461095f5760405162461bcd60e51b8152600401610588906121df565b60005b6000548110156109de57816001600160a01b03166000828154811061099757634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b031614156109cc5760008054634e487b7160e01b600052603260045260246000fd5b806109d681612372565b915050610962565b5060008054806109fe57634e487b7160e01b600052603160045260246000fd5b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b0383168252600481526040808320805460ff1916905560069091529081902090517f982d6fac85d22cbbe833f9fe4278a909ca0f3b24ecc8b1f10fe63736e3c7231391610a7a91849190611d44565b60405180910390a16001600160a01b0381166000908152600660205260408082209051600591610aa991611c81565b908152604080516020928190038301812080546001600160a01b0319166001600160a01b0395861617905582810180835260008083529486168552600690935292209151610af8929190611644565b5050565b600a546040516305d5dd4360e11b81526000916001600160a01b0316908190630babba8690610b37908a908a908a908a908a90600401611ddc565b602060405180830381600087803b158015610b5157600080fd5b505af1158015610b65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8991906118af565b979650505050505050565b6002546001600160a01b03163314610bbe5760405162461bcd60e51b815260040161058890611fee565b610bca600383836116c8565b505050565b60606001805480602002602001604051908101604052809291908181526020018280548015610c2757602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610c09575b5050505050905090565b6001600160a01b038216331480610c5257506002546001600160a01b031633145b80610c6557506001600160a01b03821632145b610c815760405162461bcd60e51b81526004016105889061218d565b81600582604051610c929190611c65565b908152604080516020928190038301812080546001600160a01b0319166001600160a01b039586161790559285166000908152600690925290207ffdcc9059d3426f73949b49e5d977553aa298184439da800d66f48959d9cc76b091610cfa91908490611e29565b60405180910390a16001600160a01b03821660009081526006602090815260409091208251610bca92840190611644565b600880546108b490612337565b6002546001600160a01b03163314610d625760405162461bcd60e51b815260040161058890611f69565b6000600b8190555b600054811015610dde576000808281548110610d9657634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b03168252600d81526040808320805460ff19166064179055600c9091528120555080610dd681612372565b915050610d6a565b50565b80516020818301810180516005825292820191909301209152546001600160a01b031681565b600660205260009081526040902080546108b490612337565b60046020526000908152604090205460ff1681565b6002546001600160a01b03163314610e5f5760405162461bcd60e51b815260040161058890612054565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6001805480820182556000919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180546001600160a01b0319166001600160a01b0392909216919091179055565b8051825114610ef35760405162461bcd60e51b815260040161058890611e57565b6000600b8190555b8251811015610bca57818181518110610f2457634e487b7160e01b600052603260045260246000fd5b602002602001015160ff16600c6000858481518110610f5357634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002081905550818181518110610f9f57634e487b7160e01b600052603260045260246000fd5b6020026020010151600d6000858481518110610fcb57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060008282829054906101000a900460ff1661100e91906122e4565b92506101000a81548160ff021916908360ff16021790555081818151811061104657634e487b7160e01b600052603260045260246000fd5b602002602001015160ff16600b6000828254611062919061228d565b9091555081905061107281612372565b915050610efb565b60606000805480602002602001604051908101604052809291908181526020018280548015610c27576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610c09575050505050905090565b600b5481565b3360009081526004602052604090205460ff168061111657506001600160a01b03821660009081526004602052604090205460ff165b6111325760405162461bcd60e51b8152600401610588906120b9565b6001600160a01b03821633141561115b5760405162461bcd60e51b81526004016105889061213c565b336000908152600d602052604090205460ff808316911610156111905760405162461bcd60e51b815260040161058890611ee6565b336000908152600d6020526040812080548392906111b290849060ff166122e4565b92506101000a81548160ff021916908360ff1602179055508060ff16600c6000846001600160a01b03166001600160a01b031681526020019081526020016000206000828254611202919061228d565b925050819055508060ff16600b600082825461121e919061228d565b90915550505050565b611231828261132c565b506001600160a01b03166000908152600d60205260409020805460ff19166064179055565b6002546001600160a01b031633146112805760405162461bcd60e51b815260040161058890611fad565b60405163b9e78f8f60e01b81526001600160a01b0384169063b9e78f8f906112ae9085908590600401611d68565b600060405180830381600087803b1580156112c857600080fd5b505af11580156112dc573d6000803e3d6000fd5b50505050505050565b600c6020526000908152604090205481565b60005490565b600980546108b490612337565b600380546108b490612337565b600d6020526000908152604090205460ff1681565b3360009081526004602052604090205460ff1615156001148061135957506002546001600160a01b031633145b6113755760405162461bcd60e51b8152600401610588906121df565b6001600160a01b03821660009081526004602052604090205460ff16156113ae5760405162461bcd60e51b81526004016105889061208b565b60006001600160a01b03166005826040516113c99190611c65565b908152604051908190036020019020546001600160a01b0316146113ff5760405162461bcd60e51b815260040161058890612025565b600080546001810182557f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5630180546001600160a01b0319166001600160a01b0385169081179091558152600660209081526040909120825161146392840190611644565b50816005826040516114759190611c65565b90815260408051918290036020908101832080546001600160a01b039586166001600160a01b031990911617905592851660008181526004909452908320805460ff191660011790556060916114cf903090602401611cf3565b60408051601f198184030181529181526020820180516001600160e01b031663acf36e5360e01b179052516115049190611c65565b600060405180830381855afa9150503d806000811461153f576040519150601f19603f3d011682016040523d82523d6000602084013e611544565b606091505b509092509050811561160557836001600160a01b03163060405160240161156b9190611cf3565b60408051601f198184030181529181526020820180516001600160e01b031663acf36e5360e01b179052516115a09190611c65565b6000604051808303816000865af19150503d80600081146115dd576040519150601f19603f3d011682016040523d82523d6000602084013e6115e2565b606091505b505080925050816116055760405162461bcd60e51b815260040161058890611eaf565b7f7c803c00251fe8138e27cfa8286be8d98625e5f6476ca6ca594f682362b711208484604051611636929190611d20565b60405180910390a150505050565b82805461165090612337565b90600052602060002090601f01602090048101928261167257600085556116b8565b82601f1061168b57805160ff19168380011785556116b8565b828001600101855582156116b8579182015b828111156116b857825182559160200191906001019061169d565b506116c492915061173c565b5090565b8280546116d490612337565b90600052602060002090601f0160209004810192826116f657600085556116b8565b82601f1061170f5782800160ff198235161785556116b8565b828001600101855582156116b8579182015b828111156116b8578235825591602001919060010190611721565b5b808211156116c4576000815560010161173d565b600082601f830112611761578081fd5b8135602061177661177183612269565b61223f565b8281528181019085830183850287018401881015611792578586fd5b855b858110156117b7576117a582611876565b84529284019290840190600101611794565b5090979650505050505050565b60008083601f8401126117d5578182fd5b50813567ffffffffffffffff8111156117ec578182fd5b60208301915083602082850101111561180457600080fd5b9250929050565b600082601f83011261181b578081fd5b813567ffffffffffffffff811115611835576118356123a3565b611848601f8201601f191660200161223f565b81815284602083860101111561185c578283fd5b816020850160208301379081016020019190915292915050565b803560ff8116811461188757600080fd5b919050565b60006020828403121561189d578081fd5b81356118a8816123b9565b9392505050565b6000602082840312156118c0578081fd5b81516118a8816123b9565b6000806000606084860312156118df578182fd5b83356118ea816123b9565b925060208401356118fa816123b9565b915061190860408501611876565b90509250925092565b60008060408385031215611923578182fd5b823561192e816123b9565b9150602083013567ffffffffffffffff811115611949578182fd5b6119558582860161180b565b9150509250929050565b60008060408385031215611971578182fd5b823561197c816123b9565b946020939093013593505050565b6000806040838503121561199c578182fd5b82356119a7816123b9565b91506119b560208401611876565b90509250929050565b600080604083850312156119d0578182fd5b823567ffffffffffffffff808211156119e7578384fd5b818501915085601f8301126119fa578384fd5b81356020611a0a61177183612269565b82815281810190858301838502870184018b1015611a26578889fd5b8896505b84871015611a51578035611a3d816123b9565b835260019690960195918301918301611a2a565b5096505086013592505080821115611a67578283fd5b5061195585828601611751565b600060208284031215611a85578081fd5b815180151581146118a8578182fd5b60008060208385031215611aa6578182fd5b823567ffffffffffffffff811115611abc578283fd5b611ac8858286016117c4565b90969095509350505050565b600080600080600060608688031215611aeb578081fd5b853567ffffffffffffffff80821115611b02578283fd5b611b0e89838a016117c4565b90975095506020880135915080821115611b26578283fd5b50611b33888289016117c4565b96999598509660400135949350505050565b600060208284031215611b56578081fd5b813567ffffffffffffffff811115611b6c578182fd5b611b788482850161180b565b949350505050565b600060208284031215611b91578081fd5b5051919050565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b60008151808452611bda816020860160208601612307565b601f01601f19169290920160200192915050565b60008154611bfb81612337565b808552602060018381168015611c185760018114611c2c57611c5a565b60ff19851688840152604088019550611c5a565b866000528260002060005b85811015611c525781548a8201860152908301908401611c37565b890184019650505b505050505092915050565b60008251611c77818460208701612307565b9190910192915050565b6000808354611c8f81612337565b60018281168015611ca75760018114611cb857611ce4565b60ff19841687528287019450611ce4565b8786526020808720875b85811015611cdb5781548a820152908401908201611cc2565b50505082870194505b50929695505050505050565b90565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0383168152604060208201819052600090611b7890830184611bc2565b6001600160a01b0383168152604060208201819052600090611b7890830184611bee565b6001600160a01b0392909216825260ff16602082015260400190565b6020808252825182820181905260009190848201906040850190845b81811015611dc55783516001600160a01b031683529284019291840191600101611da0565b50909695505050505050565b901515815260200190565b600060608252611df0606083018789611b98565b8281036020840152611e03818688611b98565b9150508260408301529695505050505050565b6000602082526118a86020830184611bc2565b600060408252611e3c6040830185611bee565b8281036020840152611e4e8185611bc2565b95945050505050565b602080825260159082015274082e4e4c2f240d8cadccee8d040dad2e6dac2e8c6d605b1b604082015260600190565b6020808252600f908201526e151c985b9cd9995c8819985a5b1959608a1b604082015260600190565b60208082526017908201527f4661696c656420746f2063726561746520706172656e74000000000000000000604082015260600190565b60208082526021908201527f4e6f7420656e6f75676820617070726563696174696f6e2072656d61696e696e6040820152606760f81b606082015260800190565b60208082526022908201527f556e61626c6520746f2063616c6c20746865207265776172642066756e63746960408201526137b760f11b606082015260800190565b60208082526024908201527f4f6e6c7920746865206c6561642063616e2072657365742061707072656369616040820152633a34b7b760e11b606082015260800190565b60208082526021908201527f4f6e6c79206c6561642063616e20706572666f726d207468697320616374696f6040820152603760f91b606082015260800190565b6020808252601f908201527f4f6e6c79206f776e65722063616e2073657420746865206d616e696665737400604082015260600190565b6020808252601590820152742730b6b29034b99030b63932b0b23c903a30b5b2b760591b604082015260600190565b6020808252601f908201527f4f6e6c79206f776e65722063616e206368616e676520746865206f776e657200604082015260600190565b60208082526014908201527313595b58995c88185b1c9958591e48185919195960621b604082015260600190565b60208082526022908201527f53656e646572206f72205265636569766572206973206e6f742061206d656d6260408201526132b960f11b606082015260800190565b60208082526021908201527f4e6f7420656e6f75676820746f6b656e7320696e2074686520636f6e747261636040820152601d60fa1b606082015260800190565b60208082526031908201527f53656e6465722063616e6e6f7420617070726563696174652068696d73656c6660408201527005c5c40e8d0c2e84ee640e6cad8ccd2e6d607b1b606082015260800190565b60208082526032908201527f4e616d65206368616e67652072657175657374206e6f742073656e742066726f604082015271369036b2b6b132b9103737b91037bbb732b960711b606082015260800190565b60208082526029908201527f52657175657374207375626d69747465642062792061206e6f6e2d6d656d626560408201526872206164647265737360b81b606082015260800190565b90815260200190565b60ff91909116815260200190565b60405181810167ffffffffffffffff81118282101715612261576122616123a3565b604052919050565b600067ffffffffffffffff821115612283576122836123a3565b5060209081020190565b600082198211156122a0576122a061238d565b500190565b6000826122c057634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156122df576122df61238d565b500290565b600060ff821660ff8416808210156122fe576122fe61238d565b90039392505050565b60005b8381101561232257818101518382015260200161230a565b83811115612331576000848401525b50505050565b60028104600182168061234b57607f821691505b6020821081141561236c57634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156123865761238661238d565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610dde57600080fdfea2646970667358221220a8efbe2a93fbfe5c91edac961dea7e68c7eebe759d874b690ff1e8dd7a1b9b9b64736f6c63430008000033a2646970667358221220a70129e03c8f2ba06cf747fe66d1368ad43ac2de543f2a7d3c7df55b55c1cdbb64736f6c63430008000033","abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"name","type":"string"},{"indexed":false,"internalType":"address","name":"addr","type":"address"}],"name":"NewHolon","type":"event"},{"inputs":[],"name":"listHolons","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_address","type":"address"}],"name":"listHolonsOf","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"_name","type":"string"},{"internalType":"uint256","name":"_parameter","type":"uint256"}],"name":"newHolon","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"","type":"string"}],"name":"toAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}]}