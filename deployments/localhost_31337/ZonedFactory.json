{"metadata":"{\"defaultCompiler\":{\"version\":\"0.8.0\"},\"sources\":{\"contracts/ZonedFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8;\\n\\nimport \\\"./Zoned.sol\\\";\\n\\n/*\\n    Copyright 2020, Roberto Valenti\\n\\n    This program is free software: you can use it, redistribute it and/or modify\\n    it under the terms of the Peer Production License as published by\\n    the P2P Foundation.\\n    \\n    https://wiki.p2pfoundation.net/Peer_Production_License\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    Peer Production License for more details.\\n */\\n\\ncontract ZonedFactory {\\n    \\n    mapping (address => address[]) private holons;\\n    mapping (string => address) public toAddress;   //NOTE: Remove on deploy\\n\\n    event NewHolon (string name, address addr);\\n \\n    /// @dev Creates an new holon and adds it to the global and personal list\\n    /// @param _name The name of the holon.\\n    /// @return Address of the new holon\\n\\n   function newHolon(string memory _name, uint _parameter) public returns (address)\\n    {\\n        //This is required by tests to return the same address. NOTE: it enforces unique names for every holon created.\\n        if (toAddress[_name] > address(0x0)) //An holon with the same name already exists\\n           return toAddress[_name];\\n\\n        Zoned newholon = new Zoned(address(this), _name, _parameter); //create an holon\\n        address addr = address(newholon);\\n        holons[address(0)].push(addr); //add to the global holon list\\n        holons[msg.sender].push(addr); // add it to the local holon list\\n        if (msg.sender != tx.origin)\\n            holons[tx.origin].push(addr); //add it to the personal holon list\\n        \\n        toAddress[_name] = addr; //remove on deploy\\n\\n        emit NewHolon(_name, addr);\\n\\n        return addr;\\n    }\\n\\n    /// @dev Lists every holons ever created\\n    /// @return an array containing the address of every holon ever created.\\n\\n    function listHolons() external view returns (address[] memory ){\\n        return holons[address(0)];\\n    }\\n\\n    /// @dev Lists every holons created by a given address\\n    /// @param _address address;\\n    /// @return an array containing the address of every holon ever created.\\n\\n    function listHolonsOf(address _address) external view returns (address[] memory){\\n        return holons[_address];\\n    }\\n\\n}\\n\",\"versionPragma\":\"^0.8\"},\"contracts/IHolonFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8;\\n\\n\\n/* ---------------------------------------------------\\n * This contract handles Holon creation, tracking and listing\\n * The Holon initiatior is the Holon lead (owner) and he is able to add and remove members\\n * from within the Holon contract\\n *\\n * ----------------------------------------------------\\n */\\ninterface IHolonFactory {\\n\\n    function newHolon(string calldata _flavor,string calldata _name, uint _parameter) external returns (address);\\n    // function getName(address _address) external view returns (string memory);\\n    // function changeName(address _address, string calldata _name) external;\\n    // function isHolon(address _address) external view returns (bool);\\n    // function isMember(address _address) external view returns (bool);\\n    function listHolons() external view returns (address[] memory);\\n    function listHolonsOf(address _address) external view returns (address[] memory);\\n}\",\"versionPragma\":\"^0.8\"},\"contracts/Membrane.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8;\\n\\n/*\\n    Copyright 2020, Roberto Valenti\\n\\n    This program is free software: you can use it, redistribute it and/or modify\\n    it under the terms of the Peer Production License as published by\\n    the P2P Foundation.\\n    \\n    https://wiki.p2pfoundation.net/Peer_Production_License\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    Peer Production License for more details.\\n */\\n\\ncontract Membrane {\\n\\n\\n    address payable[] internal  _members;\\n    address[] internal _parents;\\n    address owner;\\n    string public manifest;                  //IPFS Hash for the JSON containing the manifest of this membrane\\n  \\n    mapping (address => bool) public isMember;      //returns true if an address is a member;\\n    mapping (string => address) public toAddress;   //maps names to addresses\\n    mapping (address => string) public toName;      //maps addresses to names\\n   \\n    event AddedMember (address member, string name);\\n    event RemovedMember (address member, string name);\\n    event ChangedName(string namefrom, string nameto);\\n\\n    constructor ()\\n    {\\n        owner = tx.origin;\\n        \\n    }\\n\\n\\n    // ====================================================\\n    //                      Member Management Functions\\n    //=============================================================\\n    // these function will be used by the membrane owner to mantain the membrane members\\n\\n    function addMember(address  _memberaddress, string memory _membername) virtual\\n        public\\n    {\\n        require((isMember[msg.sender] == true || owner == msg.sender), \\\"Request submitted by a non-member address\\\");\\n        require(isMember[_memberaddress] == false, \\\"Member already added\\\");\\n        require(toAddress[_membername] == address(0), \\\"Name is already taken\\\");\\n        _members.push(payable(_memberaddress));\\n        toName[_memberaddress] = _membername;\\n        toAddress[_membername] = _memberaddress;\\n        isMember[_memberaddress] = true;\\n        \\n        // call addParent function of the new member so that it can add this membrane as a parent\\n        // detect if the contract has the function addParent\\n\\n        bool success;\\n        bytes memory data;\\n        (success, data) = _memberaddress.staticcall(\\n            abi.encodeWithSignature(\\\"addParent(address)\\\", address(this))\\n        );\\n\\n        if (success) {\\n            (success,) = _memberaddress.call(\\n                    abi.encodeWithSignature(\\\"addParent(address)\\\", address(this))\\n                    );\\n            require (success, \\\"Failed to create parent\\\");\\n        }\\n       \\n        emit AddedMember(_memberaddress, _membername);\\n    }\\n\\n    function addParent(address  _parentaddress)\\n        public\\n    {\\n        _parents.push(_parentaddress);\\n    }\\n\\n\\n    function removeMember(address _memberaddress)\\n        external\\n    {\\n        require(owner == msg.sender, \\\"Request submitted by a non-member address\\\" );\\n        for (uint256 i = 0; i < _members.length; i++) {\\n            if (_members[i] == _memberaddress) {\\n               _members[i] = _members[_members.length]; //swap position with last member\\n               break;\\n            }\\n        }\\n\\n        _members.pop(); // remove last member\\n        isMember[_memberaddress] = false;\\n\\n        emit RemovedMember(_memberaddress,toName[_memberaddress]);\\n\\n        toAddress[toName[_memberaddress]] = address(0);\\n        toName[_memberaddress] = \\\"\\\";\\n   \\n    }\\n    \\n     /// @dev Changes the name of the member\\n    /// @notice only the lead can call this function\\n    /// @param _address The address of the member\\n    /// @param _name The new name of the member\\n\\n    function changeName(address _address, string memory _name)\\n        public\\n    {\\n        require (_address == msg.sender ||\\n                msg.sender == owner ||\\n                _address == tx.origin ,\\n                \\\"Name change request not sent from member nor owner\\\");\\n        toAddress[_name] = _address;\\n        emit ChangedName(toName[_address], _name);\\n        toName[_address] = _name;\\n    }\\n\\n    /// @dev Changes the owner of the membrane\\n    /// @notice only the owner can call this function\\n    /// @param _address The address of the new owner\\n\\n    function changeOwner(address _address)\\n        public\\n    {\\n        require (msg.sender == owner, \\\"Only owner can change the owner\\\");\\n        owner = _address;\\n    }\\n \\n \\n    \\n    /// @dev Retrieves the index of  members in the membrane\\n    /// @return list of the address of the members\\n\\n    function listMembers()\\n        external\\n        view\\n        returns (address payable[] memory)\\n    {\\n        return _members;\\n    }\\n\\n    /// @dev Retrieves the list of parents of the membrane\\n    /// @return the address of the parents of the membrane\\n\\n    function listParents()\\n        external\\n        view\\n        returns (address[] memory)\\n    {\\n        return _parents;\\n    }\\n\\n    /// @dev Retrieves the size of the membrane\\n    /// @return number of members in the membrane\\n\\n    function getSize()\\n        virtual\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return _members.length; //+ _contributors.length;\\n    }\\n\\n    /// @dev Sets the hash of the latest IPFS manifest for this holon\\n    /// @notice Only the holon owner can change this!\\n    /// @param _IPFSHash The hash of the IPFS manifest\\n\\n    function setManifest(string calldata _IPFSHash)\\n        external\\n    {\\n        require (msg.sender == owner, \\\"Only owner can set the manifest\\\");\\n        manifest = _IPFSHash;\\n    }\\n}\",\"versionPragma\":\"^0.8\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"contracts/Holon.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8;\\n\\n/*\\n    Copyright 2020, Roberto Valenti\\n\\n    This program is free software: you can use it, redistribute it and/or modify\\n    it under the terms of the Peer Production License as published by\\n    the P2P Foundation.\\n    \\n    https://wiki.p2pfoundation.net/Peer_Production_License\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    Peer Production License for more details.\\n */\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IHolonFactory.sol\\\";\\nimport \\\"./Membrane.sol\\\";\\n\\ncontract Holon is Membrane{\\n\\n     //======================== Public holon variables\\n    string public name;                      //The name of the holon\\n    string public version;                   //Version of the holon contract\\n    string public flavor;                    //Type of the holon\\n    address public creator;                  //Link to the holonic parent\\n\\n    //======================== Events\\n    event HolonRewarded (address holon, string token, uint256 amount);    \\n    event MemberRewarded (address member,string token, uint256 amount);\\n    event RewardFailed(address indexed member, address token, uint256 amount);\\n\\n    /// @notice Constructor to create an holon\\n    ///  created the Holon contract, the factory needs to be deployed first\\n\\n\\n    // /// @dev Splits the ERC20 token amount sent to the holon according to the appreciation\\n    // /// @notice If appreciation is not shared, it splits it equally across each member (calling BlanketReward)\\n    //  function reward(address _tokenaddress, uint256 _tokenamount)\\n    //     public\\n    //     payable\\n    //     override\\n    // {\\n    //     bool etherreward;\\n    //     IERC20 token;\\n\\n    //     if (msg.value  > 0 && _tokenaddress == address(0)) {\\n    //         _tokenamount = msg.value;\\n    //         etherreward = true;\\n    //     }\\n    //      else {\\n    //         //Load ERC20 token information\\n    //         token = IERC20(_tokenaddress);\\n    //         require (token.balanceOf(address(this)) >= _tokenamount, \\\"Not enough tokens in the contract\\\");\\n    //     }\\n        \\n    //     uint256  amount;\\n\\n    //     for (uint256 i = 0; i < _members.length; i++) {\\n    //         if (totalappreciation > 0 ) // if any appreciation was shared\\n    //             amount = appreciation[_members[i]] * ( _tokenamount / totalappreciation); //multiply given appreciation with unit reward\\n    //         else\\n    //             amount = _tokenamount / _members.length; //else use blanket unit reward value.\\n\\n    //         if (amount > 0 ){\\n    //             if (etherreward){\\n    //                 (bool success, ) = _members[i].call{value: amount}(\\\"\\\");\\n    //                 require(success, \\\"Transfer failed\\\");\\n    //             }\\n    //             else {\\n    //                 token.transfer(_members[i],amount);\\n    //                 (bool success,) = _members[i].call(\\n    //                 abi.encodeWithSignature(\\\"reward(address,uint256)\\\", _tokenaddress, amount)\\n    //                 );\\n    //                 require(success, \\\"Unable to call the reward function\\\" );\\n    //             }\\n    //             MemberRewarded(_members[i], \\\"ERC20\\\", amount);\\n    //         }\\n    //     }\\n    //     emit HolonRewarded(address(this), \\\"ERC20\\\", _tokenamount);\\n    // }\\n\\n    //=============================================================\\n    //                      Holon Creation, Fork and Merge Functions\\n    //=============================================================\\n    // these function will be used by the holon lead to mantain the holon members\\n    function newHolon(string calldata _flavor, string calldata _name, uint _parameter) external returns (address){\\n        IHolonFactory factory = IHolonFactory(creator);\\n        return factory.newHolon(_flavor, _name, _parameter);\\n        \\n        // (bool success, bytes memory data ) = creator.call(\\n        //             abi.encodeWithSignature(\\\"newHolon(string, uint)\\\", _name, _parameter)\\n        //             );\\n        // emit Response(success, data);\\n        // require (success, \\\"Holon creation failed\\\");\\n    }\\n\\n    // function joinHolon(address _memberaddress, string memory _membername)\\n    //     public\\n    // {\\n    //     require(isMember[_memberaddress] == false, \\\"Member was already added\\\");\\n    //     require(toAddress[_membername] == address(0), \\\"Name is already taken\\\");\\n    //     _members.push(address(uint160(_memberaddress)));\\n    //     toAddress[_membername] = _memberaddress;\\n    //     toName[_memberaddress] = _membername;\\n    //     //isContributor[_memberaddress] = true;\\n\\n    //     //emit Joined(_memberaddress, name);\\n    // }\\n\\n    //This function should be called to respect the holonic peer production license.\\n    // function spork(string memory _holonname){\\n    //    Holon newholon =fork(\\\"newname\\\");\\n    //    newholon.spoon(address(this))\\n    //}\\n\\n    //This function should be called to respect the holonic peer production license.\\n    // function fork(string memory _holonname)\\n    //      public\\n    // {\\n    //      Holon newholon = Holon(factory.newHolon(_holonname));\\n    //      newholon.addMember(address(this),\\\"Initiator\\\"); //Link back to origin\\n    //      this.joinHolon(address(newholon),_holonname); // Link to fork\\n    // }\\n\\n      receive() \\n        external \\n        payable \\n    {\\n        reward(address(0),msg.value);\\n    }\\n   \\n    fallback()\\n        external\\n        payable\\n    {\\n        reward(address(0),msg.value);\\n    }\\n\\n\\n     function reward(address _tokenAddress, uint256 _tokenAmount) public payable virtual {\\n        require(_members.length > 0, \\\"No members to reward\\\");\\n        require(_tokenAmount > 0, \\\"Token amount must be greater than zero\\\");\\n\\n        if (msg.value > 0 && _tokenAddress == address(0)) {\\n            require(_tokenAmount == msg.value, \\\"Ether amount mismatch\\\");\\n            distributeEther(_tokenAmount);\\n        } else {\\n            require(_tokenAddress != address(0), \\\"Invalid token address for ERC20 reward\\\");\\n            distributeERC20(_tokenAddress, _tokenAmount);\\n        }\\n    }\\n\\n    function distributeEther(uint256 _etherAmount) private {\\n        uint256 amountPerMember = _etherAmount / _members.length;\\n        require(amountPerMember > 0, \\\"Insufficient amount for distribution\\\");\\n\\n        for (uint256 i = 0; i < _members.length; i++) {\\n            (bool success, ) = _members[i].call{value: amountPerMember}(\\\"\\\");\\n            require(success, \\\"Ether transfer failed\\\");\\n        }\\n\\n        emit HolonRewarded(address(this), \\\"ETHER\\\", _etherAmount);\\n    }\\n\\n    function distributeERC20(address _tokenAddress, uint256 _tokenAmount) private {\\n        IERC20 token = IERC20(_tokenAddress);\\n        require(token.balanceOf(address(this)) >= _tokenAmount, \\\"Not enough tokens in the contract\\\");\\n\\n        uint256 amountPerMember = _tokenAmount / _members.length;\\n        require(amountPerMember > 0, \\\"Insufficient amount for distribution\\\");\\n\\n        for (uint256 i = 0; i < _members.length; i++) {\\n            require(token.transfer(_members[i], amountPerMember), \\\"ERC20 transfer failed\\\");\\n        }\\n\\n        emit HolonRewarded(address(this), \\\"ERC20\\\", _tokenAmount);\\n    }\\n}\",\"versionPragma\":\"^0.8\"},\"contracts/Zoned.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8;\\n\\n/*\\n    Copyright 2020, Roberto Valenti\\n\\n    This program is free software: you can use it, redistribute it and/or modify\\n    it under the terms of the Peer Production License as published by\\n    the P2P Foundation.\\n    \\n    https://wiki.p2pfoundation.net/Peer_Production_License\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    Peer Production License for more details.\\n */\\n\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IHolonFactory.sol\\\";\\nimport \\\"./Holon.sol\\\";\\n\\n contract Zoned is Holon{\\n\\n    uint256 public a;\\n    uint256 public b;\\n    uint256 public c;\\n    uint256 [] public rewards;\\n     //======================== Public holon variables\\n  \\n    uint public nzones;\\n    \\n    mapping (uint => address[]) public zonemembers;\\n    mapping  (address => uint) public zone ;\\n\\n    /// @notice Constructor to create an holon\\n    ///  created the Holon contract, the factory needs to be deployed first\\n\\n    constructor (address _creator, string  memory _name, uint _nzones)\\n    {\\n        name = _name;\\n        creator = _creator;\\n        flavor = \\\"Zoned\\\";\\n\\n        nzones = _nzones;\\n        zone[tx.origin]= _nzones;\\n        zonemembers[_nzones].push(tx.origin);\\n        a = 0;\\n        b = 0;\\n        c = 1;\\n        setRewardFunction(a, b, c);\\n    }\\n\\n    //=============================================================\\n    //                      Reward Functions\\n    //=============================================================\\n    //these function will be called when a payment is sent to the holon\\n\\n    /// @dev Splits the ERC20 token amount sent to the holon according to the appreciation\\n    /// @notice If appreciation is not shared, it splits it equally across each member (calling BlanketReward)\\n    function reward(address _tokenaddress, uint256 _tokenamount)\\n        public\\n        payable\\n        override\\n    {\\n        bool etherreward;\\n        IERC20 token;\\n\\n        if (msg.value  > 0 && _tokenaddress == address(0)) {\\n            _tokenamount = msg.value;\\n            etherreward = true;\\n        }\\n         else {\\n            //Load ERC20 token information\\n            token = IERC20(_tokenaddress);\\n            require (token.balanceOf(address(this)) >= _tokenamount, \\\"Not enough tokens in the contract\\\");\\n        }\\n        \\n        uint256  amount;\\n        for (uint256 z = 1;  z <= nzones; z++) { //skip zone 0 as unassigned members\\n            if (zonemembers[z].length > 0) {\\n                amount = rewardFunction(z, _tokenamount) / zonemembers[z].length; // divide reward equally for all members in the same zone\\n                for (uint256 i = 0; i < zonemembers[z].length; i++) {\\n            \\n            //     if (totalappreciation > 0 ) // if any appreciation was shared\\n            //         amount = appreciation[_members[i]] * ( _tokenamount / totalappreciation); //multiply given appreciation with unit reward\\n            //     else\\n            //         amount = _tokenamount / _members.length ; //else use blanket unit reward value.\\n\\n                    if (amount > 0 ){\\n                        if (etherreward){\\n                            (bool success, ) = zonemembers[z][i].call{value: amount}(\\\"\\\");\\n                            require(success, \\\"Transfer failed\\\");\\n                        }\\n                        else {\\n                            token.transfer(zonemembers[z][i],amount);\\n                            (bool success,) = zonemembers[z][i].call(\\n                            abi.encodeWithSignature(\\\"reward(address,uint256)\\\", _tokenaddress, amount)\\n                            );\\n                            require(success, \\\"Unable to call the reward function\\\" );\\n                        }\\n                        emit MemberRewarded(zonemembers[z][i], \\\"ERC20\\\", amount); \\n                    }\\n                }\\n        // emit HolonRewarded(address(this), \\\"ERC20\\\", _tokenamount);TODO\\n            }\\n        }\\n    }\\n    \\n\\n    function setRewardFunction(uint _a, uint _b, uint _c) public {\\n        require (zone[tx.origin] == nzones, \\\"only core members can change the reward function\\\");\\n        a = _a;\\n        b = _b;\\n        c = _c;\\n        rewards = calculateRewards();\\n    }\\n\\n            // Function to calculate base rewards for zones 1 to 6\\n    function calculateRewards() public view returns (uint256[] memory) {\\n        uint256[] memory rewards = new uint256[](6);\\n        uint256 total = 0;\\n        for (uint256 zone = 1; zone <= nzones; ++zone) {\\n            rewards[zone] = a * zone * zone + b * zone + c;\\n            total += rewards[zone];\\n        }\\n        // Function to normalize rewards to sum to 100%\\n        for (uint256 i = 0; i < rewards.length; i++) {\\n            // Multiply by 10000 for scaling to maintain precision\\n            rewards[i] = rewards[i] * 10000 / total;\\n        }\\n        return rewards;\\n    }\\n    \\n\\n    function rewardFunction(uint _zone, uint _totalreward) private view returns (uint zonereward)\\n    {\\n        return (rewards[_zone] * _totalreward) / 10000;\\n\\n        //return _totalreward / nzones ;//(2 ^ (_zone + 1));\\n    }\\n\\n    function addToZone(address _memberaddress, uint _zone) public/// @notice Explain to an end user what this does\\n    /// @dev Explain to a developer any extra details\\n    /// @param Documents a parameter just like in doxygen (must be followed by parameter name)) private returns (uint zonereward)\\n    {\\n        require(zone[msg.sender] >= _zone, \\\"members in lower zones cannot promote to higher zones\\\"); // ch\\n        // TODO Cooloff period for nominations or validation of nomination\\n       \\n       \\n        if (zone[_memberaddress] > 0) {//if member was already in a zone\\n             //search and remove member from current group\\n            // fetch correct zone members \\n            uint previouszone = zone[_memberaddress];\\n            for (uint256 i = 0; i < zonemembers[previouszone].length; i++) {\\n                if (zonemembers[previouszone][i] == _memberaddress) {\\n                zonemembers[previouszone][i] = zonemembers[previouszone][zonemembers[previouszone].length - 1]; //swap position with last member\\n                break;\\n                }\\n            }\\n            zonemembers[previouszone].pop(); // remove last member\\n        }\\n        \\n        zone[_memberaddress]= _zone;\\n        zonemembers[_zone].push(_memberaddress);\\n    }\\n}\",\"versionPragma\":\"^0.8\"}}}","address":"0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0","bytecode":"","deployedBytecode":"","abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"name","type":"string"},{"indexed":false,"internalType":"address","name":"addr","type":"address"}],"name":"NewHolon","type":"event"},{"inputs":[],"name":"listHolons","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_address","type":"address"}],"name":"listHolonsOf","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"_name","type":"string"},{"internalType":"uint256","name":"_parameter","type":"uint256"}],"name":"newHolon","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"","type":"string"}],"name":"toAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}]}