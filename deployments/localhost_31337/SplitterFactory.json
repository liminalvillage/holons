{"metadata":"{\"defaultCompiler\":{\"version\":\"0.8.0\"},\"sources\":{\"contracts/SplitterFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8;\\n\\nimport \\\"./Splitter.sol\\\";\\n\\n/*\\n    Copyright 2020, Roberto Valenti\\n\\n    This program is free software: you can use it, redistribute it and/or modify\\n    it under the terms of the Peer Production License as published by\\n    the P2P Foundation.\\n    \\n    https://wiki.p2pfoundation.net/Peer_Production_License\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    Peer Production License for more details.\\n */\\n\\ncontract SplitterFactory {\\n    \\n    mapping (address => address[]) private holons;\\n    mapping (string => address) public toAddress;   //NOTE: Remove on deploy\\n\\n    event NewHolon (string name, address addr);\\n \\n    /// @dev Creates an new holon and adds it to the global and personal list\\n    /// @param _name The name of the holon.\\n    /// @return Address of the new holon\\n\\n   function newHolon(string memory _name, uint _parameter) public returns (address)\\n    {\\n        //This is required by tests to return the same address. NOTE: it enforces unique names for every holon created.\\n        if (toAddress[_name] > address(0x0)) //An holon with the same name already exists\\n           return toAddress[_name];\\n\\n        Splitter newholon = new Splitter(msg.sender, _name, _parameter); //create an holon\\n        address addr = address(newholon);\\n        holons[address(0)].push(addr); //add to the global holon list\\n        holons[msg.sender].push(addr); // add it to the local holon list\\n        if (msg.sender != tx.origin)\\n            holons[tx.origin].push(addr); //add it to the personal holon list\\n        \\n        toAddress[_name] = addr; //remove on deploy\\n\\n        emit NewHolon(_name, addr);\\n\\n        return addr;\\n    }\\n\\n    /// @dev Lists every holons ever created\\n    /// @return an array containing the address of every holon ever created.\\n\\n    function listHolons() external view returns (address[] memory ){\\n        return holons[address(0)];\\n    }\\n\\n    /// @dev Lists every holons created by a given address\\n    /// @param _address address;\\n    /// @return an array containing the address of every holon ever created.\\n\\n    function listHolonsOf(address _address) external view returns (address[] memory){\\n        return holons[_address];\\n    }\\n\\n}\\n\",\"versionPragma\":\"^0.8\"},\"contracts/IHolonFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8;\\n\\n\\n/* ---------------------------------------------------\\n * This contract handles Holon creation, tracking and listing\\n * The Holon initiatior is the Holon lead (owner) and he is able to add and remove members\\n * from within the Holon contract\\n *\\n * ----------------------------------------------------\\n */\\ninterface IHolonFactory {\\n\\n    function newHolon(string calldata _flavor,string calldata _name, uint _parameter) external returns (address);\\n    // function getName(address _address) external view returns (string memory);\\n    // function changeName(address _address, string calldata _name) external;\\n    // function isHolon(address _address) external view returns (bool);\\n    // function isMember(address _address) external view returns (bool);\\n    function listHolons() external view returns (address[] memory);\\n    function listHolonsOf(address _address) external view returns (address[] memory);\\n}\",\"versionPragma\":\"^0.8\"},\"contracts/Membrane.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8;\\n\\n/*\\n    Copyright 2020, Roberto Valenti\\n\\n    This program is free software: you can use it, redistribute it and/or modify\\n    it under the terms of the Peer Production License as published by\\n    the P2P Foundation.\\n    \\n    https://wiki.p2pfoundation.net/Peer_Production_License\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    Peer Production License for more details.\\n */\\n\\ncontract Membrane {\\n\\n\\n    address payable[] internal  _members;\\n    address[] internal _parents;\\n    address owner;\\n    string public manifest;                  //IPFS Hash for the JSON containing the manifest of this membrane\\n  \\n    mapping (address => bool) public isMember;      //returns true if an address is a member;\\n    mapping (string => address) public toAddress;   //maps names to addresses\\n    mapping (address => string) public toName;      //maps addresses to names\\n   \\n    event AddedMember (address member, string name);\\n    event RemovedMember (address member, string name);\\n    event ChangedName(string namefrom, string nameto);\\n\\n    constructor ()\\n    {\\n        owner = tx.origin;\\n        \\n    }\\n\\n\\n    // ====================================================\\n    //                      Member Management Functions\\n    //=============================================================\\n    // these function will be used by the membrane owner to mantain the membrane members\\n\\n    function addMember(address  _memberaddress, string memory _membername) virtual\\n        public\\n    {\\n        require((isMember[msg.sender] == true || owner == msg.sender), \\\"Request submitted by a non-member address\\\");\\n        require(isMember[_memberaddress] == false, \\\"Member already added\\\");\\n        require(toAddress[_membername] == address(0), \\\"Name is already taken\\\");\\n        _members.push(payable(_memberaddress));\\n        toName[_memberaddress] = _membername;\\n        toAddress[_membername] = _memberaddress;\\n        isMember[_memberaddress] = true;\\n        \\n        // call addParent function of the new member so that it can add this membrane as a parent\\n        // detect if the contract has the function addParent\\n\\n        bool success;\\n        bytes memory data;\\n        (success, data) = _memberaddress.staticcall(\\n            abi.encodeWithSignature(\\\"addParent(address)\\\", address(this))\\n        );\\n\\n        if (success) {\\n            (success,) = _memberaddress.call(\\n                    abi.encodeWithSignature(\\\"addParent(address)\\\", address(this))\\n                    );\\n            require (success, \\\"Failed to create parent\\\");\\n        }\\n       \\n        emit AddedMember(_memberaddress, _membername);\\n    }\\n\\n    function addParent(address  _parentaddress)\\n        public\\n    {\\n        _parents.push(_parentaddress);\\n    }\\n\\n\\n    function removeMember(address _memberaddress)\\n        external\\n    {\\n        require(owner == msg.sender, \\\"Request submitted by a non-member address\\\" );\\n        for (uint256 i = 0; i < _members.length; i++) {\\n            if (_members[i] == _memberaddress) {\\n               _members[i] = _members[_members.length]; //swap position with last member\\n               break;\\n            }\\n        }\\n\\n        _members.pop(); // remove last member\\n        isMember[_memberaddress] = false;\\n\\n        emit RemovedMember(_memberaddress,toName[_memberaddress]);\\n\\n        toAddress[toName[_memberaddress]] = address(0);\\n        toName[_memberaddress] = \\\"\\\";\\n   \\n    }\\n    \\n     /// @dev Changes the name of the member\\n    /// @notice only the lead can call this function\\n    /// @param _address The address of the member\\n    /// @param _name The new name of the member\\n\\n    function changeName(address _address, string memory _name)\\n        public\\n    {\\n        require (_address == msg.sender ||\\n                msg.sender == owner ||\\n                _address == tx.origin ,\\n                \\\"Name change request not sent from member nor owner\\\");\\n        toAddress[_name] = _address;\\n        emit ChangedName(toName[_address], _name);\\n        toName[_address] = _name;\\n    }\\n\\n    /// @dev Changes the owner of the membrane\\n    /// @notice only the owner can call this function\\n    /// @param _address The address of the new owner\\n\\n    function changeOwner(address _address)\\n        public\\n    {\\n        require (msg.sender == owner, \\\"Only owner can change the owner\\\");\\n        owner = _address;\\n    }\\n \\n \\n    \\n    /// @dev Retrieves the index of  members in the membrane\\n    /// @return list of the address of the members\\n\\n    function listMembers()\\n        external\\n        view\\n        returns (address payable[] memory)\\n    {\\n        return _members;\\n    }\\n\\n    /// @dev Retrieves the list of parents of the membrane\\n    /// @return the address of the parents of the membrane\\n\\n    function listParents()\\n        external\\n        view\\n        returns (address[] memory)\\n    {\\n        return _parents;\\n    }\\n\\n    /// @dev Retrieves the size of the membrane\\n    /// @return number of members in the membrane\\n\\n    function getSize()\\n        virtual\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return _members.length; //+ _contributors.length;\\n    }\\n\\n    /// @dev Sets the hash of the latest IPFS manifest for this holon\\n    /// @notice Only the holon owner can change this!\\n    /// @param _IPFSHash The hash of the IPFS manifest\\n\\n    function setManifest(string calldata _IPFSHash)\\n        external\\n    {\\n        require (msg.sender == owner, \\\"Only owner can set the manifest\\\");\\n        manifest = _IPFSHash;\\n    }\\n}\",\"versionPragma\":\"^0.8\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"contracts/Holon.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8;\\n\\n/*\\n    Copyright 2020, Roberto Valenti\\n\\n    This program is free software: you can use it, redistribute it and/or modify\\n    it under the terms of the Peer Production License as published by\\n    the P2P Foundation.\\n    \\n    https://wiki.p2pfoundation.net/Peer_Production_License\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    Peer Production License for more details.\\n */\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IHolonFactory.sol\\\";\\nimport \\\"./Membrane.sol\\\";\\n\\ncontract Holon is Membrane{\\n\\n     //======================== Public holon variables\\n    string public name;                      //The name of the holon\\n    string public version;                   //Version of the holon contract\\n    string public flavor;                    //Type of the holon\\n    address public creator;                  //Link to the holonic parent\\n\\n    //======================== Events\\n    event HolonRewarded (address holon, string token, uint256 amount);    \\n    event MemberRewarded (address member,string token, uint256 amount);\\n    event RewardFailed(address indexed member, address token, uint256 amount);\\n\\n    /// @notice Constructor to create an holon\\n    ///  created the Holon contract, the factory needs to be deployed first\\n\\n\\n    // /// @dev Splits the ERC20 token amount sent to the holon according to the appreciation\\n    // /// @notice If appreciation is not shared, it splits it equally across each member (calling BlanketReward)\\n    //  function reward(address _tokenaddress, uint256 _tokenamount)\\n    //     public\\n    //     payable\\n    //     override\\n    // {\\n    //     bool etherreward;\\n    //     IERC20 token;\\n\\n    //     if (msg.value  > 0 && _tokenaddress == address(0)) {\\n    //         _tokenamount = msg.value;\\n    //         etherreward = true;\\n    //     }\\n    //      else {\\n    //         //Load ERC20 token information\\n    //         token = IERC20(_tokenaddress);\\n    //         require (token.balanceOf(address(this)) >= _tokenamount, \\\"Not enough tokens in the contract\\\");\\n    //     }\\n        \\n    //     uint256  amount;\\n\\n    //     for (uint256 i = 0; i < _members.length; i++) {\\n    //         if (totalappreciation > 0 ) // if any appreciation was shared\\n    //             amount = appreciation[_members[i]] * ( _tokenamount / totalappreciation); //multiply given appreciation with unit reward\\n    //         else\\n    //             amount = _tokenamount / _members.length; //else use blanket unit reward value.\\n\\n    //         if (amount > 0 ){\\n    //             if (etherreward){\\n    //                 (bool success, ) = _members[i].call{value: amount}(\\\"\\\");\\n    //                 require(success, \\\"Transfer failed\\\");\\n    //             }\\n    //             else {\\n    //                 token.transfer(_members[i],amount);\\n    //                 (bool success,) = _members[i].call(\\n    //                 abi.encodeWithSignature(\\\"reward(address,uint256)\\\", _tokenaddress, amount)\\n    //                 );\\n    //                 require(success, \\\"Unable to call the reward function\\\" );\\n    //             }\\n    //             MemberRewarded(_members[i], \\\"ERC20\\\", amount);\\n    //         }\\n    //     }\\n    //     emit HolonRewarded(address(this), \\\"ERC20\\\", _tokenamount);\\n    // }\\n\\n    //=============================================================\\n    //                      Holon Creation, Fork and Merge Functions\\n    //=============================================================\\n    // these function will be used by the holon lead to mantain the holon members\\n    function newHolon(string calldata _flavor, string calldata _name, uint _parameter) external returns (address){\\n        IHolonFactory factory = IHolonFactory(creator);\\n        return factory.newHolon(_flavor, _name, _parameter);\\n        \\n        // (bool success, bytes memory data ) = creator.call(\\n        //             abi.encodeWithSignature(\\\"newHolon(string, uint)\\\", _name, _parameter)\\n        //             );\\n        // emit Response(success, data);\\n        // require (success, \\\"Holon creation failed\\\");\\n    }\\n\\n    // function joinHolon(address _memberaddress, string memory _membername)\\n    //     public\\n    // {\\n    //     require(isMember[_memberaddress] == false, \\\"Member was already added\\\");\\n    //     require(toAddress[_membername] == address(0), \\\"Name is already taken\\\");\\n    //     _members.push(address(uint160(_memberaddress)));\\n    //     toAddress[_membername] = _memberaddress;\\n    //     toName[_memberaddress] = _membername;\\n    //     //isContributor[_memberaddress] = true;\\n\\n    //     //emit Joined(_memberaddress, name);\\n    // }\\n\\n    //This function should be called to respect the holonic peer production license.\\n    // function spork(string memory _holonname){\\n    //    Holon newholon =fork(\\\"newname\\\");\\n    //    newholon.spoon(address(this))\\n    //}\\n\\n    //This function should be called to respect the holonic peer production license.\\n    // function fork(string memory _holonname)\\n    //      public\\n    // {\\n    //      Holon newholon = Holon(factory.newHolon(_holonname));\\n    //      newholon.addMember(address(this),\\\"Initiator\\\"); //Link back to origin\\n    //      this.joinHolon(address(newholon),_holonname); // Link to fork\\n    // }\\n\\n      receive() \\n        external \\n        payable \\n    {\\n        reward(address(0),msg.value);\\n    }\\n   \\n    fallback()\\n        external\\n        payable\\n    {\\n        reward(address(0),msg.value);\\n    }\\n\\n\\n     function reward(address _tokenAddress, uint256 _tokenAmount) public payable virtual {\\n        require(_members.length > 0, \\\"No members to reward\\\");\\n        require(_tokenAmount > 0, \\\"Token amount must be greater than zero\\\");\\n\\n        if (msg.value > 0 && _tokenAddress == address(0)) {\\n            require(_tokenAmount == msg.value, \\\"Ether amount mismatch\\\");\\n            distributeEther(_tokenAmount);\\n        } else {\\n            require(_tokenAddress != address(0), \\\"Invalid token address for ERC20 reward\\\");\\n            distributeERC20(_tokenAddress, _tokenAmount);\\n        }\\n    }\\n\\n    function distributeEther(uint256 _etherAmount) private {\\n        uint256 amountPerMember = _etherAmount / _members.length;\\n        require(amountPerMember > 0, \\\"Insufficient amount for distribution\\\");\\n\\n        for (uint256 i = 0; i < _members.length; i++) {\\n            (bool success, ) = _members[i].call{value: amountPerMember}(\\\"\\\");\\n            require(success, \\\"Ether transfer failed\\\");\\n        }\\n\\n        emit HolonRewarded(address(this), \\\"ETHER\\\", _etherAmount);\\n    }\\n\\n    function distributeERC20(address _tokenAddress, uint256 _tokenAmount) private {\\n        IERC20 token = IERC20(_tokenAddress);\\n        require(token.balanceOf(address(this)) >= _tokenAmount, \\\"Not enough tokens in the contract\\\");\\n\\n        uint256 amountPerMember = _tokenAmount / _members.length;\\n        require(amountPerMember > 0, \\\"Insufficient amount for distribution\\\");\\n\\n        for (uint256 i = 0; i < _members.length; i++) {\\n            require(token.transfer(_members[i], amountPerMember), \\\"ERC20 transfer failed\\\");\\n        }\\n\\n        emit HolonRewarded(address(this), \\\"ERC20\\\", _tokenAmount);\\n    }\\n}\",\"versionPragma\":\"^0.8\"},\"contracts/Splitter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/*\\n    Copyright 2020, Roberto Valenti\\n\\n    This program is free software: you can use it, redistribute it and/or modify\\n    it under the terms of the Peer Production License as published by\\n    the P2P Foundation.\\n    \\n    https://wiki.p2pfoundation.net/Peer_Production_License\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    Peer Production License for more details.\\n */\\nimport \\\"./IHolonFactory.sol\\\";\\nimport \\\"./Holon.sol\\\";\\n\\ncontract Splitter is Holon {\\n \\n   mapping( address => uint ) public percentages;\\n\\n    constructor (address _creator, string  memory _name, uint _parameter)\\n    {\\n        name = _name;\\n        creator = _creator;\\n        flavor = \\\"Splitter\\\";\\n        owner = _creator;\\n    }\\n  \\n    function setSplit(address[] memory members, uint[] memory percentage) public {\\n        require(owner == msg.sender, \\\"Only splitter owner can set the split\\\");\\n        require(members.length == _members.length, \\\"Members array should be equal to the full list of members\\\");\\n        require(members.length == percentage.length, \\\"Members and percentages should be equal\\\");\\n        uint totalPercentage = 0;\\n        for (uint i = 0; i < percentage.length; i++) {\\n            totalPercentage += percentage[i];\\n        }\\n        require(totalPercentage == 100, \\\"Total percentage should be 100\\\");\\n        for (uint i = 0; i < members.length; i++) {\\n            percentages[_members[i]] = percentage[i];\\n        }\\n    }\\n\\n    function reward(address _tokenaddress, uint256 _tokenamount)\\n        public\\n        payable\\n        override\\n    {\\n        bool etherreward;\\n        IERC20 token;\\n\\n        if (msg.value  > 0 && _tokenaddress == address(0)) {\\n            _tokenamount = msg.value;\\n            etherreward = true;\\n        }\\n         else {\\n            //Load ERC20 token information\\n            token = IERC20(_tokenaddress);\\n            require (token.balanceOf(address(this)) >= _tokenamount, \\\"Not enough tokens in the contract\\\");\\n        }\\n        \\n        uint256  amount;\\n\\n        for (uint256 i = 0; i < _members.length; i++) {\\n           \\n                amount = (percentages[_members[i]] * _tokenamount) / 100; //multiply given appreciation with unit reward\\n\\n            if (amount > 0 ){\\n                if (etherreward){\\n                    (bool success, ) = _members[i].call{value: amount}(\\\"\\\");\\n                    require(success, \\\"Transfer failed\\\");\\n                }\\n                else {\\n                    token.transfer(_members[i],amount);\\n                    (bool success,) = _members[i].call(\\n                    abi.encodeWithSignature(\\\"reward(address,uint256)\\\", _tokenaddress, amount)\\n                    );\\n                    require(success, \\\"Unable to call the reward function\\\" );\\n                }\\n                 emit MemberRewarded(_members[i], \\\"ERC20\\\", amount); //TODO\\n            }\\n        }\\n       // emit HolonRewarded(address(this), \\\"ERC20\\\", _tokenamount);TODO\\n    }\\n   \\n\\n}\\n\",\"versionPragma\":\"^0.8\"}}}","address":"0x5FbDB2315678afecb367f032d93F642f64180aa3","bytecode":"0x608060405234801561001057600080fd5b506128bb806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80637e4115ba14610051578063dfee57171461007a578063e43cb2701461009a578063e5c23374146100ad575b600080fd5b61006461005f36600461048e565b6100b5565b6040516100719190610554565b60405180910390f35b61008d610088366004610460565b6100db565b604051610071919061059c565b6100646100a83660046104c9565b61014f565b61008d61034a565b80516020818301810180516001825292820191909301209152546001600160a01b031681565b6001600160a01b0381166000908152602081815260409182902080548351818402810184019094528084526060939283018282801561014357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610125575b50505050509050919050565b6000806001600160a01b031660018460405161016b9190610538565b908152604051908190036020019020546001600160a01b031611156101ba5760018360405161019a9190610538565b908152604051908190036020019020546001600160a01b03169050610344565b60003384846040516101cb906103d2565b6101d793929190610568565b604051809103906000f0801580156101f3573d6000803e3d6000fd5b50600060208181527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5805460018181019092557ff0df3dcda05b4fbd9c655cde3d5ceb211e019e72ec816e127a59e7195f2cd7f50180546001600160a01b0386166001600160a01b03199182168117909255338086526040862080549485018155865293909420909101805490931617909155909150819032146102c857326000908152602081815260408220805460018101825590835291200180546001600160a01b0319166001600160a01b0383161790555b806001866040516102d99190610538565b90815260405190819003602001812080546001600160a01b03939093166001600160a01b0319909316929092179091557f10d047031611691941b661f2160741619b4030812eb79997f4b3734ed5605a439061033890879084906105e9565b60405180910390a19150505b92915050565b600080805260209081527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb580546040805182850281018501909152818152606093909291908301828280156103c857602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116103aa575b5050505050905090565b61222c8061065a83390190565b600082601f8301126103ef578081fd5b813567ffffffffffffffff8082111561040a5761040a610643565b604051601f8301601f19168101602001828111828210171561042e5761042e610643565b604052828152848301602001861015610445578384fd5b82602086016020830137918201602001929092529392505050565b600060208284031215610471578081fd5b81356001600160a01b0381168114610487578182fd5b9392505050565b60006020828403121561049f578081fd5b813567ffffffffffffffff8111156104b5578182fd5b6104c1848285016103df565b949350505050565b600080604083850312156104db578081fd5b823567ffffffffffffffff8111156104f1578182fd5b6104fd858286016103df565b95602094909401359450505050565b60008151808452610524816020860160208601610613565b601f01601f19169290920160200192915050565b6000825161054a818460208701610613565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b038416815260606020820181905260009061058c9083018561050c565b9050826040830152949350505050565b6020808252825182820181905260009190848201906040850190845b818110156105dd5783516001600160a01b0316835292840192918401916001016105b8565b50909695505050505050565b6000604082526105fc604083018561050c565b905060018060a01b03831660208301529392505050565b60005b8381101561062e578181015183820152602001610616565b8381111561063d576000848401525b50505050565b634e487b7160e01b600052604160045260246000fdfe60806040523480156200001157600080fd5b506040516200222c3803806200222c833981016040819052620000349162000178565b600280546001600160a01b0319163217905581516200005b906007906020850190620000d2565b50600a80546001600160a01b0319166001600160a01b0385161790556040805180820190915260088082526729b83634ba3a32b960c11b6020909201918252620000a891600991620000d2565b5050600280546001600160a01b0319166001600160a01b03939093169290921790915550620002c6565b828054620000e09062000273565b90600052602060002090601f0160209004810192826200010457600085556200014f565b82601f106200011f57805160ff19168380011785556200014f565b828001600101855582156200014f579182015b828111156200014f57825182559160200191906001019062000132565b506200015d92915062000161565b5090565b5b808211156200015d576000815560010162000162565b6000806000606084860312156200018d578283fd5b83516001600160a01b0381168114620001a4578384fd5b602085810151919450906001600160401b0380821115620001c3578485fd5b818701915087601f830112620001d7578485fd5b815181811115620001ec57620001ec620002b0565b604051601f8201601f1916810185018381118282101715620002125762000212620002b0565b60405281815283820185018a101562000229578687fd5b8692505b818310156200024c57838301850151818401860152918401916200022d565b818311156200025d57868583830101525b8096505050505050604084015190509250925092565b6002810460018216806200028857607f821691505b60208210811415620002aa57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b611f5680620002d66000396000f3fe60806040526004361061012e5760003560e01c806381bc3f8c116100ab578063acf36e531161006f578063acf36e531461033c578063b6afd2ca1461035c578063c127c24714610371578063de8fa43114610391578063f59e4f65146103a6578063f5baf0d7146103bb57610140565b806381bc3f8c146102825780639d592c66146102a2578063a230c524146102cf578063a6f9dae1146102fc578063ac246ee71461031c57610140565b806329b84d09116100f257806329b84d09146101eb5780633113a2ae1461020b57806345ca25ed1461022d57806354fd4d501461024d5780637e4115ba1461026257610140565b806302d05d3f1461014b57806306fdde03146101765780630b1ca49a146101985780630babba86146101b857806321670f22146101d857610140565b366101405761013e6000346103d0565b005b61013e6000346103d0565b34801561015757600080fd5b506101606107fb565b60405161016d91906118c5565b60405180910390f35b34801561018257600080fd5b5061018b61080a565b60405161016d9190611a02565b3480156101a457600080fd5b5061013e6101b33660046114d8565b610898565b3480156101c457600080fd5b506101606101d33660046116a6565b610a5f565b61013e6101e6366004611565565b6103d0565b3480156101f757600080fd5b5061013e610206366004611666565b610af7565b34801561021757600080fd5b50610220610b32565b60405161016d9190611970565b34801561023957600080fd5b5061013e610248366004611517565b610b94565b34801561025957600080fd5b5061018b610c8e565b34801561026e57600080fd5b5061016061027d366004611717565b610c9b565b34801561028e57600080fd5b5061018b61029d3660046114d8565b610cc1565b3480156102ae57600080fd5b506102c26102bd3660046114d8565b610cda565b60405161016d9190611dac565b3480156102db57600080fd5b506102ef6102ea3660046114d8565b610cec565b60405161016d91906119bd565b34801561030857600080fd5b5061013e6103173660046114d8565b610d01565b34801561032857600080fd5b5061013e610337366004611590565b610d4d565b34801561034857600080fd5b5061013e6103573660046114d8565b610ec4565b34801561036857600080fd5b50610220610f15565b34801561037d57600080fd5b5061013e61038c366004611517565b610f75565b34801561039d57600080fd5b506102c261128d565b3480156103b257600080fd5b5061018b611293565b3480156103c757600080fd5b5061018b6112a0565b6000806000341180156103ea57506001600160a01b038416155b156103fb57349250600191506104a3565b506040516370a0823160e01b8152839083906001600160a01b038316906370a082319061042c9030906004016118c5565b60206040518083038186803b15801561044457600080fd5b505afa158015610458573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047c9190611752565b10156104a35760405162461bcd60e51b815260040161049a90611bf7565b60405180910390fd5b6000805b6000548110156107f357606485600b60008085815481106104d857634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b031683528201929092526040019020546105079190611e3b565b6105119190611e1b565b915081156107e15783156105d057600080828154811061054157634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546040516001600160a01b03909116908490610567906118c2565b60006040518083038185875af1925050503d80600081146105a4576040519150601f19603f3d011682016040523d82523d6000602084013e6105a9565b606091505b50509050806105ca5760405162461bcd60e51b815260040161049a90611a43565b50610772565b826001600160a01b031663a9059cbb6000838154811061060057634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546040516001600160e01b031960e084901b168152610638916001600160a01b031690869060040161190f565b602060405180830381600087803b15801561065257600080fd5b505af1158015610666573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068a9190611646565b5060008082815481106106ad57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546040516001600160a01b03909116906106d8908990869060240161190f565b60408051601f198184030181529181526020820180516001600160e01b03166310b3879160e11b1790525161070d9190611837565b6000604051808303816000865af19150503d806000811461074a576040519150601f19603f3d011682016040523d82523d6000602084013e61074f565b606091505b50509050806107705760405162461bcd60e51b815260040161049a90611aa3565b505b7f04481a311a9d6c25d5003a3df0e3a0b58e5647e088a39de363764e28532a78b7600082815481106107b457634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546040516107d8916001600160a01b03169085906118d9565b60405180910390a15b806107eb81611ec1565b9150506104a7565b505050505050565b600a546001600160a01b031681565b6007805461081790611e86565b80601f016020809104026020016040519081016040528092919081815260200182805461084390611e86565b80156108905780601f1061086557610100808354040283529160200191610890565b820191906000526020600020905b81548152906001019060200180831161087357829003601f168201915b505050505081565b6002546001600160a01b031633146108c25760405162461bcd60e51b815260040161049a90611ce7565b60005b60005481101561094157816001600160a01b0316600082815481106108fa57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b0316141561092f5760008054634e487b7160e01b600052603260045260246000fd5b8061093981611ec1565b9150506108c5565b50600080548061096157634e487b7160e01b600052603160045260246000fd5b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b0383168252600481526040808320805460ff1916905560069091529081902090517f982d6fac85d22cbbe833f9fe4278a909ca0f3b24ecc8b1f10fe63736e3c72313916109dd9184919061194c565b60405180910390a16001600160a01b0381166000908152600660205260408082209051600591610a0c91611853565b908152604080516020928190038301812080546001600160a01b0319166001600160a01b0395861617905582810180835260008083529486168552600690935292209151610a5b9291906112ad565b5050565b600a546040516305d5dd4360e11b81526000916001600160a01b0316908190630babba8690610a9a908a908a908a908a908a906004016119c8565b602060405180830381600087803b158015610ab457600080fd5b505af1158015610ac8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aec91906114fb565b979650505050505050565b6002546001600160a01b03163314610b215760405162461bcd60e51b815260040161049a90611ae5565b610b2d60038383611331565b505050565b60606001805480602002602001604051908101604052809291908181526020018280548015610b8a57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610b6c575b5050505050905090565b6001600160a01b038216331480610bb557506002546001600160a01b031633145b80610bc857506001600160a01b03821632145b610be45760405162461bcd60e51b815260040161049a90611c95565b81600582604051610bf59190611837565b908152604080516020928190038301812080546001600160a01b0319166001600160a01b039586161790559285166000908152600690925290207ffdcc9059d3426f73949b49e5d977553aa298184439da800d66f48959d9cc76b091610c5d91908490611a15565b60405180910390a16001600160a01b03821660009081526006602090815260409091208251610b2d928401906112ad565b6008805461081790611e86565b80516020818301810180516005825292820191909301209152546001600160a01b031681565b6006602052600090815260409020805461081790611e86565b600b6020526000908152604090205481565b60046020526000908152604090205460ff1681565b6002546001600160a01b03163314610d2b5760405162461bcd60e51b815260040161049a90611b92565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6002546001600160a01b03163314610d775760405162461bcd60e51b815260040161049a90611d30565b600054825114610d995760405162461bcd60e51b815260040161049a90611c38565b8051825114610dba5760405162461bcd60e51b815260040161049a90611b1c565b6000805b8251811015610e0e57828181518110610de757634e487b7160e01b600052603260045260246000fd5b602002602001015182610dfa9190611e03565b915080610e0681611ec1565b915050610dbe565b5080606414610e2f5760405162461bcd60e51b815260040161049a90611d75565b60005b8351811015610ebe57828181518110610e5b57634e487b7160e01b600052603260045260246000fd5b6020026020010151600b6000808481548110610e8757634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b0316835282019290925260400190205580610eb681611ec1565b915050610e32565b50505050565b6001805480820182556000919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180546001600160a01b0319166001600160a01b0392909216919091179055565b60606000805480602002602001604051908101604052809291908181526020018280548015610b8a576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610b6c575050505050905090565b3360009081526004602052604090205460ff16151560011480610fa257506002546001600160a01b031633145b610fbe5760405162461bcd60e51b815260040161049a90611ce7565b6001600160a01b03821660009081526004602052604090205460ff1615610ff75760405162461bcd60e51b815260040161049a90611bc9565b60006001600160a01b03166005826040516110129190611837565b908152604051908190036020019020546001600160a01b0316146110485760405162461bcd60e51b815260040161049a90611b63565b600080546001810182557f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5630180546001600160a01b0319166001600160a01b038516908117909155815260066020908152604090912082516110ac928401906112ad565b50816005826040516110be9190611837565b90815260408051918290036020908101832080546001600160a01b039586166001600160a01b031990911617905592851660008181526004909452908320805460ff191660011790556060916111189030906024016118c5565b60408051601f198184030181529181526020820180516001600160e01b031663acf36e5360e01b1790525161114d9190611837565b600060405180830381855afa9150503d8060008114611188576040519150601f19603f3d011682016040523d82523d6000602084013e61118d565b606091505b509092509050811561124e57836001600160a01b0316306040516024016111b491906118c5565b60408051601f198184030181529181526020820180516001600160e01b031663acf36e5360e01b179052516111e99190611837565b6000604051808303816000865af19150503d8060008114611226576040519150601f19603f3d011682016040523d82523d6000602084013e61122b565b606091505b5050809250508161124e5760405162461bcd60e51b815260040161049a90611a6c565b7f7c803c00251fe8138e27cfa8286be8d98625e5f6476ca6ca594f682362b71120848460405161127f929190611928565b60405180910390a150505050565b60005490565b6009805461081790611e86565b6003805461081790611e86565b8280546112b990611e86565b90600052602060002090601f0160209004810192826112db5760008555611321565b82601f106112f457805160ff1916838001178555611321565b82800160010185558215611321579182015b82811115611321578251825591602001919060010190611306565b5061132d9291506113a5565b5090565b82805461133d90611e86565b90600052602060002090601f01602090048101928261135f5760008555611321565b82601f106113785782800160ff19823516178555611321565b82800160010185558215611321579182015b8281111561132157823582559160200191906001019061138a565b5b8082111561132d57600081556001016113a6565b600082601f8301126113ca578081fd5b813560206113df6113da83611ddf565b611db5565b82815281810190858301838502870184018810156113fb578586fd5b855b85811015611419578135845292840192908401906001016113fd565b5090979650505050505050565b60008083601f840112611437578182fd5b50813567ffffffffffffffff81111561144e578182fd5b60208301915083602082850101111561146657600080fd5b9250929050565b600082601f83011261147d578081fd5b813567ffffffffffffffff81111561149757611497611ef2565b6114aa601f8201601f1916602001611db5565b8181528460208386010111156114be578283fd5b816020850160208301379081016020019190915292915050565b6000602082840312156114e9578081fd5b81356114f481611f08565b9392505050565b60006020828403121561150c578081fd5b81516114f481611f08565b60008060408385031215611529578081fd5b823561153481611f08565b9150602083013567ffffffffffffffff81111561154f578182fd5b61155b8582860161146d565b9150509250929050565b60008060408385031215611577578182fd5b823561158281611f08565b946020939093013593505050565b600080604083850312156115a2578182fd5b823567ffffffffffffffff808211156115b9578384fd5b818501915085601f8301126115cc578384fd5b813560206115dc6113da83611ddf565b82815281810190858301838502870184018b10156115f8578889fd5b8896505b8487101561162357803561160f81611f08565b8352600196909601959183019183016115fc565b5096505086013592505080821115611639578283fd5b5061155b858286016113ba565b600060208284031215611657578081fd5b815180151581146114f4578182fd5b60008060208385031215611678578182fd5b823567ffffffffffffffff81111561168e578283fd5b61169a85828601611426565b90969095509350505050565b6000806000806000606086880312156116bd578081fd5b853567ffffffffffffffff808211156116d4578283fd5b6116e089838a01611426565b909750955060208801359150808211156116f8578283fd5b5061170588828901611426565b96999598509660400135949350505050565b600060208284031215611728578081fd5b813567ffffffffffffffff81111561173e578182fd5b61174a8482850161146d565b949350505050565b600060208284031215611763578081fd5b5051919050565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b600081518084526117ac816020860160208601611e5a565b601f01601f19169290920160200192915050565b600081546117cd81611e86565b8085526020600183811680156117ea57600181146117fe5761182c565b60ff1985168884015260408801955061182c565b866000528260002060005b858110156118245781548a8201860152908301908401611809565b890184019650505b505050505092915050565b60008251611849818460208701611e5a565b9190910192915050565b600080835461186181611e86565b60018281168015611879576001811461188a576118b6565b60ff198416875282870194506118b6565b8786526020808720875b858110156118ad5781548a820152908401908201611894565b50505082870194505b50929695505050505050565b90565b6001600160a01b0391909116815260200190565b6001600160a01b0392909216825260606020830181905260059083015264045524332360dc1b6080830152604082015260a00190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b038316815260406020820181905260009061174a90830184611794565b6001600160a01b038316815260406020820181905260009061174a908301846117c0565b6020808252825182820181905260009190848201906040850190845b818110156119b15783516001600160a01b03168352928401929184019160010161198c565b50909695505050505050565b901515815260200190565b6000606082526119dc60608301878961176a565b82810360208401526119ef81868861176a565b9150508260408301529695505050505050565b6000602082526114f46020830184611794565b600060408252611a2860408301856117c0565b8281036020840152611a3a8185611794565b95945050505050565b6020808252600f908201526e151c985b9cd9995c8819985a5b1959608a1b604082015260600190565b60208082526017908201527f4661696c656420746f2063726561746520706172656e74000000000000000000604082015260600190565b60208082526022908201527f556e61626c6520746f2063616c6c20746865207265776172642066756e63746960408201526137b760f11b606082015260800190565b6020808252601f908201527f4f6e6c79206f776e65722063616e2073657420746865206d616e696665737400604082015260600190565b60208082526027908201527f4d656d6265727320616e642070657263656e74616765732073686f756c6420626040820152661948195c5d585b60ca1b606082015260800190565b6020808252601590820152742730b6b29034b99030b63932b0b23c903a30b5b2b760591b604082015260600190565b6020808252601f908201527f4f6e6c79206f776e65722063616e206368616e676520746865206f776e657200604082015260600190565b60208082526014908201527313595b58995c88185b1c9958591e48185919195960621b604082015260600190565b60208082526021908201527f4e6f7420656e6f75676820746f6b656e7320696e2074686520636f6e747261636040820152601d60fa1b606082015260800190565b60208082526039908201527f4d656d626572732061727261792073686f756c6420626520657175616c20746f60408201527f207468652066756c6c206c697374206f66206d656d6265727300000000000000606082015260800190565b60208082526032908201527f4e616d65206368616e67652072657175657374206e6f742073656e742066726f604082015271369036b2b6b132b9103737b91037bbb732b960711b606082015260800190565b60208082526029908201527f52657175657374207375626d69747465642062792061206e6f6e2d6d656d626560408201526872206164647265737360b81b606082015260800190565b60208082526025908201527f4f6e6c792073706c6974746572206f776e65722063616e2073657420746865206040820152641cdc1b1a5d60da1b606082015260800190565b6020808252601e908201527f546f74616c2070657263656e746167652073686f756c64206265203130300000604082015260600190565b90815260200190565b60405181810167ffffffffffffffff81118282101715611dd757611dd7611ef2565b604052919050565b600067ffffffffffffffff821115611df957611df9611ef2565b5060209081020190565b60008219821115611e1657611e16611edc565b500190565b600082611e3657634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615611e5557611e55611edc565b500290565b60005b83811015611e75578181015183820152602001611e5d565b83811115610ebe5750506000910152565b600281046001821680611e9a57607f821691505b60208210811415611ebb57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415611ed557611ed5611edc565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114611f1d57600080fd5b5056fea26469706673582212200022ce958a1bb11666916cd98e92b212768a53a9feeacb94631777ecd91d7ab164736f6c63430008000033a2646970667358221220c9153a929b97298314c626af4480fe0554bd0bfed1cea531cec9b60d5547889764736f6c63430008000033","deployedBytecode":"0x608060405234801561001057600080fd5b506004361061004c5760003560e01c80637e4115ba14610051578063dfee57171461007a578063e43cb2701461009a578063e5c23374146100ad575b600080fd5b61006461005f36600461048e565b6100b5565b6040516100719190610554565b60405180910390f35b61008d610088366004610460565b6100db565b604051610071919061059c565b6100646100a83660046104c9565b61014f565b61008d61034a565b80516020818301810180516001825292820191909301209152546001600160a01b031681565b6001600160a01b0381166000908152602081815260409182902080548351818402810184019094528084526060939283018282801561014357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610125575b50505050509050919050565b6000806001600160a01b031660018460405161016b9190610538565b908152604051908190036020019020546001600160a01b031611156101ba5760018360405161019a9190610538565b908152604051908190036020019020546001600160a01b03169050610344565b60003384846040516101cb906103d2565b6101d793929190610568565b604051809103906000f0801580156101f3573d6000803e3d6000fd5b50600060208181527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5805460018181019092557ff0df3dcda05b4fbd9c655cde3d5ceb211e019e72ec816e127a59e7195f2cd7f50180546001600160a01b0386166001600160a01b03199182168117909255338086526040862080549485018155865293909420909101805490931617909155909150819032146102c857326000908152602081815260408220805460018101825590835291200180546001600160a01b0319166001600160a01b0383161790555b806001866040516102d99190610538565b90815260405190819003602001812080546001600160a01b03939093166001600160a01b0319909316929092179091557f10d047031611691941b661f2160741619b4030812eb79997f4b3734ed5605a439061033890879084906105e9565b60405180910390a19150505b92915050565b600080805260209081527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb580546040805182850281018501909152818152606093909291908301828280156103c857602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116103aa575b5050505050905090565b61222c8061065a83390190565b600082601f8301126103ef578081fd5b813567ffffffffffffffff8082111561040a5761040a610643565b604051601f8301601f19168101602001828111828210171561042e5761042e610643565b604052828152848301602001861015610445578384fd5b82602086016020830137918201602001929092529392505050565b600060208284031215610471578081fd5b81356001600160a01b0381168114610487578182fd5b9392505050565b60006020828403121561049f578081fd5b813567ffffffffffffffff8111156104b5578182fd5b6104c1848285016103df565b949350505050565b600080604083850312156104db578081fd5b823567ffffffffffffffff8111156104f1578182fd5b6104fd858286016103df565b95602094909401359450505050565b60008151808452610524816020860160208601610613565b601f01601f19169290920160200192915050565b6000825161054a818460208701610613565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b038416815260606020820181905260009061058c9083018561050c565b9050826040830152949350505050565b6020808252825182820181905260009190848201906040850190845b818110156105dd5783516001600160a01b0316835292840192918401916001016105b8565b50909695505050505050565b6000604082526105fc604083018561050c565b905060018060a01b03831660208301529392505050565b60005b8381101561062e578181015183820152602001610616565b8381111561063d576000848401525b50505050565b634e487b7160e01b600052604160045260246000fdfe60806040523480156200001157600080fd5b506040516200222c3803806200222c833981016040819052620000349162000178565b600280546001600160a01b0319163217905581516200005b906007906020850190620000d2565b50600a80546001600160a01b0319166001600160a01b0385161790556040805180820190915260088082526729b83634ba3a32b960c11b6020909201918252620000a891600991620000d2565b5050600280546001600160a01b0319166001600160a01b03939093169290921790915550620002c6565b828054620000e09062000273565b90600052602060002090601f0160209004810192826200010457600085556200014f565b82601f106200011f57805160ff19168380011785556200014f565b828001600101855582156200014f579182015b828111156200014f57825182559160200191906001019062000132565b506200015d92915062000161565b5090565b5b808211156200015d576000815560010162000162565b6000806000606084860312156200018d578283fd5b83516001600160a01b0381168114620001a4578384fd5b602085810151919450906001600160401b0380821115620001c3578485fd5b818701915087601f830112620001d7578485fd5b815181811115620001ec57620001ec620002b0565b604051601f8201601f1916810185018381118282101715620002125762000212620002b0565b60405281815283820185018a101562000229578687fd5b8692505b818310156200024c57838301850151818401860152918401916200022d565b818311156200025d57868583830101525b8096505050505050604084015190509250925092565b6002810460018216806200028857607f821691505b60208210811415620002aa57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b611f5680620002d66000396000f3fe60806040526004361061012e5760003560e01c806381bc3f8c116100ab578063acf36e531161006f578063acf36e531461033c578063b6afd2ca1461035c578063c127c24714610371578063de8fa43114610391578063f59e4f65146103a6578063f5baf0d7146103bb57610140565b806381bc3f8c146102825780639d592c66146102a2578063a230c524146102cf578063a6f9dae1146102fc578063ac246ee71461031c57610140565b806329b84d09116100f257806329b84d09146101eb5780633113a2ae1461020b57806345ca25ed1461022d57806354fd4d501461024d5780637e4115ba1461026257610140565b806302d05d3f1461014b57806306fdde03146101765780630b1ca49a146101985780630babba86146101b857806321670f22146101d857610140565b366101405761013e6000346103d0565b005b61013e6000346103d0565b34801561015757600080fd5b506101606107fb565b60405161016d91906118c5565b60405180910390f35b34801561018257600080fd5b5061018b61080a565b60405161016d9190611a02565b3480156101a457600080fd5b5061013e6101b33660046114d8565b610898565b3480156101c457600080fd5b506101606101d33660046116a6565b610a5f565b61013e6101e6366004611565565b6103d0565b3480156101f757600080fd5b5061013e610206366004611666565b610af7565b34801561021757600080fd5b50610220610b32565b60405161016d9190611970565b34801561023957600080fd5b5061013e610248366004611517565b610b94565b34801561025957600080fd5b5061018b610c8e565b34801561026e57600080fd5b5061016061027d366004611717565b610c9b565b34801561028e57600080fd5b5061018b61029d3660046114d8565b610cc1565b3480156102ae57600080fd5b506102c26102bd3660046114d8565b610cda565b60405161016d9190611dac565b3480156102db57600080fd5b506102ef6102ea3660046114d8565b610cec565b60405161016d91906119bd565b34801561030857600080fd5b5061013e6103173660046114d8565b610d01565b34801561032857600080fd5b5061013e610337366004611590565b610d4d565b34801561034857600080fd5b5061013e6103573660046114d8565b610ec4565b34801561036857600080fd5b50610220610f15565b34801561037d57600080fd5b5061013e61038c366004611517565b610f75565b34801561039d57600080fd5b506102c261128d565b3480156103b257600080fd5b5061018b611293565b3480156103c757600080fd5b5061018b6112a0565b6000806000341180156103ea57506001600160a01b038416155b156103fb57349250600191506104a3565b506040516370a0823160e01b8152839083906001600160a01b038316906370a082319061042c9030906004016118c5565b60206040518083038186803b15801561044457600080fd5b505afa158015610458573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047c9190611752565b10156104a35760405162461bcd60e51b815260040161049a90611bf7565b60405180910390fd5b6000805b6000548110156107f357606485600b60008085815481106104d857634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b031683528201929092526040019020546105079190611e3b565b6105119190611e1b565b915081156107e15783156105d057600080828154811061054157634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546040516001600160a01b03909116908490610567906118c2565b60006040518083038185875af1925050503d80600081146105a4576040519150601f19603f3d011682016040523d82523d6000602084013e6105a9565b606091505b50509050806105ca5760405162461bcd60e51b815260040161049a90611a43565b50610772565b826001600160a01b031663a9059cbb6000838154811061060057634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546040516001600160e01b031960e084901b168152610638916001600160a01b031690869060040161190f565b602060405180830381600087803b15801561065257600080fd5b505af1158015610666573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068a9190611646565b5060008082815481106106ad57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546040516001600160a01b03909116906106d8908990869060240161190f565b60408051601f198184030181529181526020820180516001600160e01b03166310b3879160e11b1790525161070d9190611837565b6000604051808303816000865af19150503d806000811461074a576040519150601f19603f3d011682016040523d82523d6000602084013e61074f565b606091505b50509050806107705760405162461bcd60e51b815260040161049a90611aa3565b505b7f04481a311a9d6c25d5003a3df0e3a0b58e5647e088a39de363764e28532a78b7600082815481106107b457634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546040516107d8916001600160a01b03169085906118d9565b60405180910390a15b806107eb81611ec1565b9150506104a7565b505050505050565b600a546001600160a01b031681565b6007805461081790611e86565b80601f016020809104026020016040519081016040528092919081815260200182805461084390611e86565b80156108905780601f1061086557610100808354040283529160200191610890565b820191906000526020600020905b81548152906001019060200180831161087357829003601f168201915b505050505081565b6002546001600160a01b031633146108c25760405162461bcd60e51b815260040161049a90611ce7565b60005b60005481101561094157816001600160a01b0316600082815481106108fa57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b0316141561092f5760008054634e487b7160e01b600052603260045260246000fd5b8061093981611ec1565b9150506108c5565b50600080548061096157634e487b7160e01b600052603160045260246000fd5b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b0383168252600481526040808320805460ff1916905560069091529081902090517f982d6fac85d22cbbe833f9fe4278a909ca0f3b24ecc8b1f10fe63736e3c72313916109dd9184919061194c565b60405180910390a16001600160a01b0381166000908152600660205260408082209051600591610a0c91611853565b908152604080516020928190038301812080546001600160a01b0319166001600160a01b0395861617905582810180835260008083529486168552600690935292209151610a5b9291906112ad565b5050565b600a546040516305d5dd4360e11b81526000916001600160a01b0316908190630babba8690610a9a908a908a908a908a908a906004016119c8565b602060405180830381600087803b158015610ab457600080fd5b505af1158015610ac8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aec91906114fb565b979650505050505050565b6002546001600160a01b03163314610b215760405162461bcd60e51b815260040161049a90611ae5565b610b2d60038383611331565b505050565b60606001805480602002602001604051908101604052809291908181526020018280548015610b8a57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610b6c575b5050505050905090565b6001600160a01b038216331480610bb557506002546001600160a01b031633145b80610bc857506001600160a01b03821632145b610be45760405162461bcd60e51b815260040161049a90611c95565b81600582604051610bf59190611837565b908152604080516020928190038301812080546001600160a01b0319166001600160a01b039586161790559285166000908152600690925290207ffdcc9059d3426f73949b49e5d977553aa298184439da800d66f48959d9cc76b091610c5d91908490611a15565b60405180910390a16001600160a01b03821660009081526006602090815260409091208251610b2d928401906112ad565b6008805461081790611e86565b80516020818301810180516005825292820191909301209152546001600160a01b031681565b6006602052600090815260409020805461081790611e86565b600b6020526000908152604090205481565b60046020526000908152604090205460ff1681565b6002546001600160a01b03163314610d2b5760405162461bcd60e51b815260040161049a90611b92565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6002546001600160a01b03163314610d775760405162461bcd60e51b815260040161049a90611d30565b600054825114610d995760405162461bcd60e51b815260040161049a90611c38565b8051825114610dba5760405162461bcd60e51b815260040161049a90611b1c565b6000805b8251811015610e0e57828181518110610de757634e487b7160e01b600052603260045260246000fd5b602002602001015182610dfa9190611e03565b915080610e0681611ec1565b915050610dbe565b5080606414610e2f5760405162461bcd60e51b815260040161049a90611d75565b60005b8351811015610ebe57828181518110610e5b57634e487b7160e01b600052603260045260246000fd5b6020026020010151600b6000808481548110610e8757634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b0316835282019290925260400190205580610eb681611ec1565b915050610e32565b50505050565b6001805480820182556000919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180546001600160a01b0319166001600160a01b0392909216919091179055565b60606000805480602002602001604051908101604052809291908181526020018280548015610b8a576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610b6c575050505050905090565b3360009081526004602052604090205460ff16151560011480610fa257506002546001600160a01b031633145b610fbe5760405162461bcd60e51b815260040161049a90611ce7565b6001600160a01b03821660009081526004602052604090205460ff1615610ff75760405162461bcd60e51b815260040161049a90611bc9565b60006001600160a01b03166005826040516110129190611837565b908152604051908190036020019020546001600160a01b0316146110485760405162461bcd60e51b815260040161049a90611b63565b600080546001810182557f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5630180546001600160a01b0319166001600160a01b038516908117909155815260066020908152604090912082516110ac928401906112ad565b50816005826040516110be9190611837565b90815260408051918290036020908101832080546001600160a01b039586166001600160a01b031990911617905592851660008181526004909452908320805460ff191660011790556060916111189030906024016118c5565b60408051601f198184030181529181526020820180516001600160e01b031663acf36e5360e01b1790525161114d9190611837565b600060405180830381855afa9150503d8060008114611188576040519150601f19603f3d011682016040523d82523d6000602084013e61118d565b606091505b509092509050811561124e57836001600160a01b0316306040516024016111b491906118c5565b60408051601f198184030181529181526020820180516001600160e01b031663acf36e5360e01b179052516111e99190611837565b6000604051808303816000865af19150503d8060008114611226576040519150601f19603f3d011682016040523d82523d6000602084013e61122b565b606091505b5050809250508161124e5760405162461bcd60e51b815260040161049a90611a6c565b7f7c803c00251fe8138e27cfa8286be8d98625e5f6476ca6ca594f682362b71120848460405161127f929190611928565b60405180910390a150505050565b60005490565b6009805461081790611e86565b6003805461081790611e86565b8280546112b990611e86565b90600052602060002090601f0160209004810192826112db5760008555611321565b82601f106112f457805160ff1916838001178555611321565b82800160010185558215611321579182015b82811115611321578251825591602001919060010190611306565b5061132d9291506113a5565b5090565b82805461133d90611e86565b90600052602060002090601f01602090048101928261135f5760008555611321565b82601f106113785782800160ff19823516178555611321565b82800160010185558215611321579182015b8281111561132157823582559160200191906001019061138a565b5b8082111561132d57600081556001016113a6565b600082601f8301126113ca578081fd5b813560206113df6113da83611ddf565b611db5565b82815281810190858301838502870184018810156113fb578586fd5b855b85811015611419578135845292840192908401906001016113fd565b5090979650505050505050565b60008083601f840112611437578182fd5b50813567ffffffffffffffff81111561144e578182fd5b60208301915083602082850101111561146657600080fd5b9250929050565b600082601f83011261147d578081fd5b813567ffffffffffffffff81111561149757611497611ef2565b6114aa601f8201601f1916602001611db5565b8181528460208386010111156114be578283fd5b816020850160208301379081016020019190915292915050565b6000602082840312156114e9578081fd5b81356114f481611f08565b9392505050565b60006020828403121561150c578081fd5b81516114f481611f08565b60008060408385031215611529578081fd5b823561153481611f08565b9150602083013567ffffffffffffffff81111561154f578182fd5b61155b8582860161146d565b9150509250929050565b60008060408385031215611577578182fd5b823561158281611f08565b946020939093013593505050565b600080604083850312156115a2578182fd5b823567ffffffffffffffff808211156115b9578384fd5b818501915085601f8301126115cc578384fd5b813560206115dc6113da83611ddf565b82815281810190858301838502870184018b10156115f8578889fd5b8896505b8487101561162357803561160f81611f08565b8352600196909601959183019183016115fc565b5096505086013592505080821115611639578283fd5b5061155b858286016113ba565b600060208284031215611657578081fd5b815180151581146114f4578182fd5b60008060208385031215611678578182fd5b823567ffffffffffffffff81111561168e578283fd5b61169a85828601611426565b90969095509350505050565b6000806000806000606086880312156116bd578081fd5b853567ffffffffffffffff808211156116d4578283fd5b6116e089838a01611426565b909750955060208801359150808211156116f8578283fd5b5061170588828901611426565b96999598509660400135949350505050565b600060208284031215611728578081fd5b813567ffffffffffffffff81111561173e578182fd5b61174a8482850161146d565b949350505050565b600060208284031215611763578081fd5b5051919050565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b600081518084526117ac816020860160208601611e5a565b601f01601f19169290920160200192915050565b600081546117cd81611e86565b8085526020600183811680156117ea57600181146117fe5761182c565b60ff1985168884015260408801955061182c565b866000528260002060005b858110156118245781548a8201860152908301908401611809565b890184019650505b505050505092915050565b60008251611849818460208701611e5a565b9190910192915050565b600080835461186181611e86565b60018281168015611879576001811461188a576118b6565b60ff198416875282870194506118b6565b8786526020808720875b858110156118ad5781548a820152908401908201611894565b50505082870194505b50929695505050505050565b90565b6001600160a01b0391909116815260200190565b6001600160a01b0392909216825260606020830181905260059083015264045524332360dc1b6080830152604082015260a00190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b038316815260406020820181905260009061174a90830184611794565b6001600160a01b038316815260406020820181905260009061174a908301846117c0565b6020808252825182820181905260009190848201906040850190845b818110156119b15783516001600160a01b03168352928401929184019160010161198c565b50909695505050505050565b901515815260200190565b6000606082526119dc60608301878961176a565b82810360208401526119ef81868861176a565b9150508260408301529695505050505050565b6000602082526114f46020830184611794565b600060408252611a2860408301856117c0565b8281036020840152611a3a8185611794565b95945050505050565b6020808252600f908201526e151c985b9cd9995c8819985a5b1959608a1b604082015260600190565b60208082526017908201527f4661696c656420746f2063726561746520706172656e74000000000000000000604082015260600190565b60208082526022908201527f556e61626c6520746f2063616c6c20746865207265776172642066756e63746960408201526137b760f11b606082015260800190565b6020808252601f908201527f4f6e6c79206f776e65722063616e2073657420746865206d616e696665737400604082015260600190565b60208082526027908201527f4d656d6265727320616e642070657263656e74616765732073686f756c6420626040820152661948195c5d585b60ca1b606082015260800190565b6020808252601590820152742730b6b29034b99030b63932b0b23c903a30b5b2b760591b604082015260600190565b6020808252601f908201527f4f6e6c79206f776e65722063616e206368616e676520746865206f776e657200604082015260600190565b60208082526014908201527313595b58995c88185b1c9958591e48185919195960621b604082015260600190565b60208082526021908201527f4e6f7420656e6f75676820746f6b656e7320696e2074686520636f6e747261636040820152601d60fa1b606082015260800190565b60208082526039908201527f4d656d626572732061727261792073686f756c6420626520657175616c20746f60408201527f207468652066756c6c206c697374206f66206d656d6265727300000000000000606082015260800190565b60208082526032908201527f4e616d65206368616e67652072657175657374206e6f742073656e742066726f604082015271369036b2b6b132b9103737b91037bbb732b960711b606082015260800190565b60208082526029908201527f52657175657374207375626d69747465642062792061206e6f6e2d6d656d626560408201526872206164647265737360b81b606082015260800190565b60208082526025908201527f4f6e6c792073706c6974746572206f776e65722063616e2073657420746865206040820152641cdc1b1a5d60da1b606082015260800190565b6020808252601e908201527f546f74616c2070657263656e746167652073686f756c64206265203130300000604082015260600190565b90815260200190565b60405181810167ffffffffffffffff81118282101715611dd757611dd7611ef2565b604052919050565b600067ffffffffffffffff821115611df957611df9611ef2565b5060209081020190565b60008219821115611e1657611e16611edc565b500190565b600082611e3657634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615611e5557611e55611edc565b500290565b60005b83811015611e75578181015183820152602001611e5d565b83811115610ebe5750506000910152565b600281046001821680611e9a57607f821691505b60208210811415611ebb57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415611ed557611ed5611edc565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114611f1d57600080fd5b5056fea26469706673582212200022ce958a1bb11666916cd98e92b212768a53a9feeacb94631777ecd91d7ab164736f6c63430008000033a2646970667358221220c9153a929b97298314c626af4480fe0554bd0bfed1cea531cec9b60d5547889764736f6c63430008000033","abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"name","type":"string"},{"indexed":false,"internalType":"address","name":"addr","type":"address"}],"name":"NewHolon","type":"event"},{"inputs":[],"name":"listHolons","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_address","type":"address"}],"name":"listHolonsOf","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"_name","type":"string"},{"internalType":"uint256","name":"_parameter","type":"uint256"}],"name":"newHolon","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"","type":"string"}],"name":"toAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}]}