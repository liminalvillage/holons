{"metadata":"{\"defaultCompiler\":{\"version\":\"0.8.0\"},\"sources\":{\"contracts/ManagedFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8;\\n\\nimport \\\"./Managed.sol\\\";\\n\\n/*\\n    Copyright 2020, Roberto Valenti\\n\\n    This program is free software: you can use it, redistribute it and/or modify\\n    it under the terms of the Peer Production License as published by\\n    the P2P Foundation.\\n    \\n    https://wiki.p2pfoundation.net/Peer_Production_License\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    Peer Production License for more details.\\n */\\n\\ncontract ManagedFactory {\\n    \\n    mapping (address => address[]) private holons;\\n    mapping (string => address) public toAddress;   //NOTE: Remove on deploy\\n\\n    event NewHolon (string name, address addr);\\n \\n    /// @dev Creates an new holon and adds it to the global and personal list\\n    /// @param _name The name of the holon.\\n    /// @return Address of the new holon\\n\\n   function newHolon(string memory _name, uint _parameter) public returns (address)\\n    {\\n        //This is required by tests to return the same address. NOTE: it enforces unique names for every holon created.\\n        if (toAddress[_name] > address(0x0)) //An holon with the same name already exists\\n           return toAddress[_name];\\n\\n        Managed newholon = new Managed(msg.sender, _name); //create an holon\\n        address addr = address(newholon);\\n        holons[address(0)].push(addr); //add to the global holon list\\n        holons[msg.sender].push(addr); // add it to the local holon list\\n        if (msg.sender != tx.origin)\\n            holons[tx.origin].push(addr); //add it to the personal holon list\\n        \\n        toAddress[_name] = addr; //remove on deploy\\n\\n        emit NewHolon(_name, addr);\\n\\n        return addr;\\n    }\\n\\n    /// @dev Lists every holons ever created\\n    /// @return an array containing the address of every holon ever created.\\n\\n    function listHolons() external view returns (address[] memory ){\\n        return holons[address(0)];\\n    }\\n\\n    /// @dev Lists every holons created by a given address\\n    /// @param _address address;\\n    /// @return an array containing the address of every holon ever created.\\n\\n    function listHolonsOf(address _address) external view returns (address[] memory){\\n        return holons[_address];\\n    }\\n\\n}\\n\",\"versionPragma\":\"^0.8\"},\"contracts/IHolonFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8;\\n\\n\\n/* ---------------------------------------------------\\n * This contract handles Holon creation, tracking and listing\\n * The Holon initiatior is the Holon lead (owner) and he is able to add and remove members\\n * from within the Holon contract\\n *\\n * ----------------------------------------------------\\n */\\ninterface IHolonFactory {\\n\\n    function newHolon(string calldata _flavor,string calldata _name, uint _parameter) external returns (address);\\n    // function getName(address _address) external view returns (string memory);\\n    // function changeName(address _address, string calldata _name) external;\\n    // function isHolon(address _address) external view returns (bool);\\n    // function isMember(address _address) external view returns (bool);\\n    function listHolons() external view returns (address[] memory);\\n    function listHolonsOf(address _address) external view returns (address[] memory);\\n}\",\"versionPragma\":\"^0.8\"},\"contracts/Membrane.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8;\\n\\n/*\\n    Copyright 2020, Roberto Valenti\\n\\n    This program is free software: you can use it, redistribute it and/or modify\\n    it under the terms of the Peer Production License as published by\\n    the P2P Foundation.\\n    \\n    https://wiki.p2pfoundation.net/Peer_Production_License\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    Peer Production License for more details.\\n */\\n\\ncontract Membrane {\\n\\n\\n    address payable[] internal  _members;\\n    address[] internal _parents;\\n    address owner;\\n    string public manifest;                  //IPFS Hash for the JSON containing the manifest of this membrane\\n  \\n    mapping (address => bool) public isMember;      //returns true if an address is a member;\\n    mapping (string => address) public toAddress;   //maps names to addresses\\n    mapping (address => string) public toName;      //maps addresses to names\\n   \\n    event AddedMember (address member, string name);\\n    event RemovedMember (address member, string name);\\n    event ChangedName(string namefrom, string nameto);\\n\\n    constructor ()\\n    {\\n        owner = tx.origin;\\n        \\n    }\\n\\n\\n    // ====================================================\\n    //                      Member Management Functions\\n    //=============================================================\\n    // these function will be used by the membrane owner to mantain the membrane members\\n\\n    function addMember(address  _memberaddress, string memory _membername) virtual\\n        public\\n    {\\n        require((isMember[msg.sender] == true || owner == msg.sender), \\\"Request submitted by a non-member address\\\");\\n        require(isMember[_memberaddress] == false, \\\"Member already added\\\");\\n        require(toAddress[_membername] == address(0), \\\"Name is already taken\\\");\\n        _members.push(payable(_memberaddress));\\n        toName[_memberaddress] = _membername;\\n        toAddress[_membername] = _memberaddress;\\n        isMember[_memberaddress] = true;\\n        \\n        // call addParent function of the new member so that it can add this membrane as a parent\\n        // detect if the contract has the function addParent\\n\\n        bool success;\\n        bytes memory data;\\n        (success, data) = _memberaddress.staticcall(\\n            abi.encodeWithSignature(\\\"addParent(address)\\\", address(this))\\n        );\\n\\n        if (success) {\\n            (success,) = _memberaddress.call(\\n                    abi.encodeWithSignature(\\\"addParent(address)\\\", address(this))\\n                    );\\n            require (success, \\\"Failed to create parent\\\");\\n        }\\n       \\n        emit AddedMember(_memberaddress, _membername);\\n    }\\n\\n    function addParent(address  _parentaddress)\\n        public\\n    {\\n        _parents.push(_parentaddress);\\n    }\\n\\n\\n    function removeMember(address _memberaddress)\\n        external\\n    {\\n        require(owner == msg.sender, \\\"Request submitted by a non-member address\\\" );\\n        for (uint256 i = 0; i < _members.length; i++) {\\n            if (_members[i] == _memberaddress) {\\n               _members[i] = _members[_members.length]; //swap position with last member\\n               break;\\n            }\\n        }\\n\\n        _members.pop(); // remove last member\\n        isMember[_memberaddress] = false;\\n\\n        emit RemovedMember(_memberaddress,toName[_memberaddress]);\\n\\n        toAddress[toName[_memberaddress]] = address(0);\\n        toName[_memberaddress] = \\\"\\\";\\n   \\n    }\\n    \\n     /// @dev Changes the name of the member\\n    /// @notice only the lead can call this function\\n    /// @param _address The address of the member\\n    /// @param _name The new name of the member\\n\\n    function changeName(address _address, string memory _name)\\n        public\\n    {\\n        require (_address == msg.sender ||\\n                msg.sender == owner ||\\n                _address == tx.origin ,\\n                \\\"Name change request not sent from member nor owner\\\");\\n        toAddress[_name] = _address;\\n        emit ChangedName(toName[_address], _name);\\n        toName[_address] = _name;\\n    }\\n\\n    /// @dev Changes the owner of the membrane\\n    /// @notice only the owner can call this function\\n    /// @param _address The address of the new owner\\n\\n    function changeOwner(address _address)\\n        public\\n    {\\n        require (msg.sender == owner, \\\"Only owner can change the owner\\\");\\n        owner = _address;\\n    }\\n \\n \\n    \\n    /// @dev Retrieves the index of  members in the membrane\\n    /// @return list of the address of the members\\n\\n    function listMembers()\\n        external\\n        view\\n        returns (address payable[] memory)\\n    {\\n        return _members;\\n    }\\n\\n    /// @dev Retrieves the list of parents of the membrane\\n    /// @return the address of the parents of the membrane\\n\\n    function listParents()\\n        external\\n        view\\n        returns (address[] memory)\\n    {\\n        return _parents;\\n    }\\n\\n    /// @dev Retrieves the size of the membrane\\n    /// @return number of members in the membrane\\n\\n    function getSize()\\n        virtual\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return _members.length; //+ _contributors.length;\\n    }\\n\\n    /// @dev Sets the hash of the latest IPFS manifest for this holon\\n    /// @notice Only the holon owner can change this!\\n    /// @param _IPFSHash The hash of the IPFS manifest\\n\\n    function setManifest(string calldata _IPFSHash)\\n        external\\n    {\\n        require (msg.sender == owner, \\\"Only owner can set the manifest\\\");\\n        manifest = _IPFSHash;\\n    }\\n}\",\"versionPragma\":\"^0.8\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"contracts/Holon.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8;\\n\\n/*\\n    Copyright 2020, Roberto Valenti\\n\\n    This program is free software: you can use it, redistribute it and/or modify\\n    it under the terms of the Peer Production License as published by\\n    the P2P Foundation.\\n    \\n    https://wiki.p2pfoundation.net/Peer_Production_License\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    Peer Production License for more details.\\n */\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IHolonFactory.sol\\\";\\nimport \\\"./Membrane.sol\\\";\\n\\ncontract Holon is Membrane{\\n\\n     //======================== Public holon variables\\n    string public name;                      //The name of the holon\\n    string public version;                   //Version of the holon contract\\n    string public flavor;                    //Type of the holon\\n    address public creator;                  //Link to the holonic parent\\n\\n    //======================== Events\\n    event HolonRewarded (address holon, string token, uint256 amount);    \\n    event MemberRewarded (address member,string token, uint256 amount);\\n    event RewardFailed(address indexed member, address token, uint256 amount);\\n\\n    /// @notice Constructor to create an holon\\n    ///  created the Holon contract, the factory needs to be deployed first\\n\\n\\n    // /// @dev Splits the ERC20 token amount sent to the holon according to the appreciation\\n    // /// @notice If appreciation is not shared, it splits it equally across each member (calling BlanketReward)\\n    //  function reward(address _tokenaddress, uint256 _tokenamount)\\n    //     public\\n    //     payable\\n    //     override\\n    // {\\n    //     bool etherreward;\\n    //     IERC20 token;\\n\\n    //     if (msg.value  > 0 && _tokenaddress == address(0)) {\\n    //         _tokenamount = msg.value;\\n    //         etherreward = true;\\n    //     }\\n    //      else {\\n    //         //Load ERC20 token information\\n    //         token = IERC20(_tokenaddress);\\n    //         require (token.balanceOf(address(this)) >= _tokenamount, \\\"Not enough tokens in the contract\\\");\\n    //     }\\n        \\n    //     uint256  amount;\\n\\n    //     for (uint256 i = 0; i < _members.length; i++) {\\n    //         if (totalappreciation > 0 ) // if any appreciation was shared\\n    //             amount = appreciation[_members[i]] * ( _tokenamount / totalappreciation); //multiply given appreciation with unit reward\\n    //         else\\n    //             amount = _tokenamount / _members.length; //else use blanket unit reward value.\\n\\n    //         if (amount > 0 ){\\n    //             if (etherreward){\\n    //                 (bool success, ) = _members[i].call{value: amount}(\\\"\\\");\\n    //                 require(success, \\\"Transfer failed\\\");\\n    //             }\\n    //             else {\\n    //                 token.transfer(_members[i],amount);\\n    //                 (bool success,) = _members[i].call(\\n    //                 abi.encodeWithSignature(\\\"reward(address,uint256)\\\", _tokenaddress, amount)\\n    //                 );\\n    //                 require(success, \\\"Unable to call the reward function\\\" );\\n    //             }\\n    //             MemberRewarded(_members[i], \\\"ERC20\\\", amount);\\n    //         }\\n    //     }\\n    //     emit HolonRewarded(address(this), \\\"ERC20\\\", _tokenamount);\\n    // }\\n\\n    //=============================================================\\n    //                      Holon Creation, Fork and Merge Functions\\n    //=============================================================\\n    // these function will be used by the holon lead to mantain the holon members\\n    function newHolon(string calldata _flavor, string calldata _name, uint _parameter) external returns (address){\\n        IHolonFactory factory = IHolonFactory(creator);\\n        return factory.newHolon(_flavor, _name, _parameter);\\n        \\n        // (bool success, bytes memory data ) = creator.call(\\n        //             abi.encodeWithSignature(\\\"newHolon(string, uint)\\\", _name, _parameter)\\n        //             );\\n        // emit Response(success, data);\\n        // require (success, \\\"Holon creation failed\\\");\\n    }\\n\\n    // function joinHolon(address _memberaddress, string memory _membername)\\n    //     public\\n    // {\\n    //     require(isMember[_memberaddress] == false, \\\"Member was already added\\\");\\n    //     require(toAddress[_membername] == address(0), \\\"Name is already taken\\\");\\n    //     _members.push(address(uint160(_memberaddress)));\\n    //     toAddress[_membername] = _memberaddress;\\n    //     toName[_memberaddress] = _membername;\\n    //     //isContributor[_memberaddress] = true;\\n\\n    //     //emit Joined(_memberaddress, name);\\n    // }\\n\\n    //This function should be called to respect the holonic peer production license.\\n    // function spork(string memory _holonname){\\n    //    Holon newholon =fork(\\\"newname\\\");\\n    //    newholon.spoon(address(this))\\n    //}\\n\\n    //This function should be called to respect the holonic peer production license.\\n    // function fork(string memory _holonname)\\n    //      public\\n    // {\\n    //      Holon newholon = Holon(factory.newHolon(_holonname));\\n    //      newholon.addMember(address(this),\\\"Initiator\\\"); //Link back to origin\\n    //      this.joinHolon(address(newholon),_holonname); // Link to fork\\n    // }\\n\\n      receive() \\n        external \\n        payable \\n    {\\n        reward(address(0),msg.value);\\n    }\\n   \\n    fallback()\\n        external\\n        payable\\n    {\\n        reward(address(0),msg.value);\\n    }\\n\\n\\n     function reward(address _tokenAddress, uint256 _tokenAmount) public payable virtual {\\n        require(_members.length > 0, \\\"No members to reward\\\");\\n        require(_tokenAmount > 0, \\\"Token amount must be greater than zero\\\");\\n\\n        if (msg.value > 0 && _tokenAddress == address(0)) {\\n            require(_tokenAmount == msg.value, \\\"Ether amount mismatch\\\");\\n            distributeEther(_tokenAmount);\\n        } else {\\n            require(_tokenAddress != address(0), \\\"Invalid token address for ERC20 reward\\\");\\n            distributeERC20(_tokenAddress, _tokenAmount);\\n        }\\n    }\\n\\n    function distributeEther(uint256 _etherAmount) private {\\n        uint256 amountPerMember = _etherAmount / _members.length;\\n        require(amountPerMember > 0, \\\"Insufficient amount for distribution\\\");\\n\\n        for (uint256 i = 0; i < _members.length; i++) {\\n            (bool success, ) = _members[i].call{value: amountPerMember}(\\\"\\\");\\n            require(success, \\\"Ether transfer failed\\\");\\n        }\\n\\n        emit HolonRewarded(address(this), \\\"ETHER\\\", _etherAmount);\\n    }\\n\\n    function distributeERC20(address _tokenAddress, uint256 _tokenAmount) private {\\n        IERC20 token = IERC20(_tokenAddress);\\n        require(token.balanceOf(address(this)) >= _tokenAmount, \\\"Not enough tokens in the contract\\\");\\n\\n        uint256 amountPerMember = _tokenAmount / _members.length;\\n        require(amountPerMember > 0, \\\"Insufficient amount for distribution\\\");\\n\\n        for (uint256 i = 0; i < _members.length; i++) {\\n            require(token.transfer(_members[i], amountPerMember), \\\"ERC20 transfer failed\\\");\\n        }\\n\\n        emit HolonRewarded(address(this), \\\"ERC20\\\", _tokenAmount);\\n    }\\n}\",\"versionPragma\":\"^0.8\"},\"contracts/Managed.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/*\\n    Copyright 2020, Roberto Valenti\\n\\n    This program is free software: you can use it, redistribute it and/or modify\\n    it under the terms of the Peer Production License as published by\\n    the P2P Foundation.\\n    \\n    https://wiki.p2pfoundation.net/Peer_Production_License\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    Peer Production License for more details.\\n */\\nimport \\\"./IHolonFactory.sol\\\";\\nimport \\\"./Holon.sol\\\";\\n\\ncontract Managed is Holon {\\n    string[] public userIds; // list of userIds\\n    mapping(string => address) public userIdToAddress; // mapping for userIds to addresses\\n    mapping(string => bool) public hasClaimed; // mapping to track if userId has already claimed\\n    mapping(string => bool) public isManagedMember; // mapping to track if userId has already claimed\\n    mapping(string => uint256) public etherBalance; // storage for Ether by userID\\n    mapping(string => mapping(address => uint256)) public tokenBalance; // storage for ERC20 by userID\\n    mapping(string => address[]) public tokensOf; // list of received tokens for a specific userID\\n    mapping(address => uint256) public totalDeposited; // total amount of tokens deposited in the contract\\n    uint256 public totalappreciation;\\n    mapping(string => uint256) public appreciation; // appreciation received by a member based on UserID\\n\\n    event LogClaimEther(string userId, address beneficiary, uint256 amount);\\n\\n\\n    constructor(address _creator, string memory _name) {\\n        name = _name;\\n        creator = _creator;\\n        totalappreciation = 0;\\n    }\\n\\n    // Only the creator can add members\\n    function addMember(string memory _userId) external {\\n        require(msg.sender == creator, \\\"Only creator can add members\\\");\\n        if (isManagedMember[_userId]) return; // Gently fail if user is already added\\n        isManagedMember[_userId] = true;\\n        userIds.push(_userId);\\n    }\\n\\n    // Add multiple members at once\\n    function addMembers(string[] memory _userIds) external {\\n        require(msg.sender == creator, \\\"Only creator can add members\\\");\\n        for (uint i = 0; i < _userIds.length; i++) {\\n            string memory userId = _userIds[i];\\n            if (isManagedMember[userId]) continue; // Skip if user is already added\\n            isManagedMember[userId] = true;\\n            userIds.push(userId);\\n        }\\n    }\\n\\n    function getSize() external view override returns (uint256) {\\n        return userIds.length;\\n    }\\n\\n    // Only the creator can set appreciation for members\\n    function setUserAppreciation(\\n        string memory _userId,\\n        uint256 _appreciationAmount\\n    ) external {\\n        require(msg.sender == creator, \\\"Only creator can set appreciation\\\");\\n        appreciation[_userId] = _appreciationAmount;\\n        totalappreciation += _appreciationAmount;\\n    }\\n\\n    //set appreciation for an array of users\\n    function setAppreciation(\\n        string[] memory _userIds,\\n        uint256[] memory _appreciationAmounts\\n    ) external {\\n        require(msg.sender == creator, \\\"Only creator can set appreciation\\\");\\n        require(\\n            _userIds.length == _appreciationAmounts.length,\\n            \\\"Array lengths do not match\\\"\\n        );\\n        for (uint i = 0; i < _userIds.length; i++) {\\n            appreciation[_userIds[i]] = _appreciationAmounts[i];\\n            totalappreciation += _appreciationAmounts[i];\\n        }\\n    }\\n\\n    // Function to deposit Ether for a specific userID\\n    function depositEtherForUser(\\n        string memory _userId,\\n        uint256 amount\\n    ) external payable {\\n        etherBalance[_userId] += amount;\\n    }\\n\\n    // Function to deposit ERC20 tokens for a specific userID\\n    function depositTokenForUser(\\n        string memory _userId,\\n        address _tokenAddress,\\n        uint256 _amount\\n    ) external {\\n        IERC20 token = IERC20(_tokenAddress);\\n        //require(token.transferFrom(msg.sender, address(this), _amount), \\\"Token transfer failed\\\");\\n        tokenBalance[_userId][_tokenAddress] += _amount;\\n        tokensOf[_userId].push(_tokenAddress);\\n        totalDeposited[_tokenAddress] += _amount;\\n    }\\n\\n    //claim both ether and tokens\\n    function claim(string memory _userId, address _beneficiary) external {\\n        require(!hasClaimed[_userId], \\\"User has already claimed\\\");\\n        if (userIdToAddress[_userId] == address(0)) {\\n            userIdToAddress[_userId] = _beneficiary; // Associate user ID with address on first claim\\n        } else {\\n            // require(userIdToAddress[_userId] == _beneficiary, \\\"Unauthorized\\\");\\n        }\\n         claimEther(_userId, _beneficiary);\\n         claimTokens(_userId, _beneficiary);\\n        hasClaimed[_userId] = true;\\n    }\\n\\n    // Function for users to claim their Ether\\n    function claimEther(string memory _userId, address _beneficiary) internal {\\n        require(\\n            msg.sender == creator,\\n            \\\"Only creator can submit an user claim Ether\\\"\\n        );\\n        uint256 amount = etherBalance[_userId];\\n        require(_beneficiary != address(0), \\\"Invalid beneficiary address\\\");\\n\\n        emit LogClaimEther(_userId, _beneficiary, amount);\\n        if (amount > 0 ) {\\n            (bool sent, bytes memory data) = _beneficiary.call{value: amount}(\\\"\\\");\\n            require(sent, \\\"Claiming Ether failed\\\");\\n        }\\n        etherBalance[_userId] = 0;\\n    }\\n\\n    // Function for users to claim their ERC20 tokens\\n    function claimTokens(string memory _userId, address _beneficiary) internal {\\n        require(\\n            msg.sender == creator,\\n            \\\"Only creator can submit an user claim Tokens\\\"\\n        );\\n        // Loop through all tokens and transfer to user\\n        address[] memory tokens = tokensOf[_userId];\\n        for (uint i = 0; i < tokensOf[_userId].length; i++) {\\n            IERC20 token = IERC20(tokens[i]);\\n            uint256 amount = tokenBalance[_userId][tokens[i]];\\n            if (amount > 0) {\\n                tokenBalance[_userId][tokens[i]] = 0;\\n                totalDeposited[tokens[i]] -= amount;\\n                token.transfer(_beneficiary, amount);\\n            }\\n        }\\n    }\\n    // reward function to reward all members through their user id\\n    function reward(\\n        address _tokenaddress,\\n        uint256 _tokenamount\\n    ) public payable override  {\\n        bool etherreward;\\n        IERC20 token;\\n\\n        if (msg.value > 0 && _tokenaddress == address(0)) {\\n            //ether reward\\n            _tokenamount = msg.value;\\n            etherreward = true;\\n        } else {\\n            //token reward\\n            //Load ERC20 token information\\n            token = IERC20(_tokenaddress);\\n            emit MemberRewarded(address(this), \\\"`tokenbalance\\\", token.balanceOf(address(this))); // TODO\\n        \\n            require(\\n                token.balanceOf(address(this))- totalDeposited[_tokenaddress] >= _tokenamount,\\n                \\\"Not enough tokens in the contract\\\"\\n            );\\n        }\\n\\n        uint256 amount;\\n\\n        for (uint256 i = 0; i < userIds.length; i++) {\\n            if (totalappreciation > 0) // if any appreciation was shared\\n                amount = (appreciation[userIds[i]] * _tokenamount) / totalappreciation; //multiply given appreciation with unit reward\\n            else \\n                amount = _tokenamount / userIds.length; //else use blanket unit reward value.\\n\\n            if (amount > 0) {\\n                if (etherreward) { //ETHER CASE\\n                    if (hasClaimed[userIds[i]]) {\\n                        (bool success, ) = payable(userIdToAddress[userIds[i]])\\n                            .call{value: amount}(\\\"\\\");\\n                        require(success, \\\"Transfer failed\\\");\\n                    } else {\\n                        this.depositEtherForUser(userIds[i], amount); //userIds[i].call{value: amount}(\\\"\\\");\\n                        emit MemberRewarded(address(0), \\\"STOREDETH\\\", amount); // TODO\\n                    }\\n                } else { //  ERC20 CASE\\n                    if (hasClaimed[userIds[i]]) {\\n                        token.transfer(userIdToAddress[userIds[i]], amount);\\n                        (bool success, ) = userIdToAddress[userIds[i]].call(\\n                            abi.encodeWithSignature(\\n                                \\\"reward(address,uint256)\\\",\\n                                _tokenaddress,\\n                                amount\\n                            )\\n                        );\\n                        require(success, \\\"Unable to call the reward function\\\" );\\n                        emit MemberRewarded(\\n                            userIdToAddress[userIds[i]],\\n                            \\\"ERC20\\\",\\n                            amount\\n                        ); // TODO\\n                    } else{\\n                        this.depositTokenForUser(\\n                            userIds[i],\\n                            _tokenaddress,\\n                            amount\\n                        );\\n                        emit MemberRewarded(address(0), \\\"STOREDERC20\\\", amount); // TODO\\n                    }\\n                }\\n            }\\n        }\\n        // emit HolonRewarded(address(this), \\\"ERC20\\\", _tokenamount); // TODO\\n    }\\n\\n}\",\"versionPragma\":\"^0.8\"}}}","address":"0x8cdee21EdD7937f601D29A9f5538C83D304E5bEf","bytecode":"0x608060405234801561001057600080fd5b50613aee806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80637e4115ba14610051578063dfee57171461007a578063e43cb2701461009a578063e5c23374146100ad575b600080fd5b61006461005f36600461048c565b6100b5565b6040516100719190610552565b60405180910390f35b61008d61008836600461045e565b6100db565b604051610071919061058a565b6100646100a83660046104c7565b61014f565b61008d610348565b80516020818301810180516001825292820191909301209152546001600160a01b031681565b6001600160a01b0381166000908152602081815260409182902080548351818402810184019094528084526060939283018282801561014357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610125575b50505050509050919050565b6000806001600160a01b031660018460405161016b9190610536565b908152604051908190036020019020546001600160a01b031611156101ba5760018360405161019a9190610536565b908152604051908190036020019020546001600160a01b03169050610342565b600033846040516101ca906103d0565b6101d5929190610566565b604051809103906000f0801580156101f1573d6000803e3d6000fd5b50600060208181527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5805460018181019092557ff0df3dcda05b4fbd9c655cde3d5ceb211e019e72ec816e127a59e7195f2cd7f50180546001600160a01b0386166001600160a01b03199182168117909255338086526040862080549485018155865293909420909101805490931617909155909150819032146102c657326000908152602081815260408220805460018101825590835291200180546001600160a01b0319166001600160a01b0383161790555b806001866040516102d79190610536565b90815260405190819003602001812080546001600160a01b03939093166001600160a01b0319909316929092179091557f10d047031611691941b661f2160741619b4030812eb79997f4b3734ed5605a439061033690879084906105d7565b60405180910390a19150505b92915050565b600080805260209081527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb580546040805182850281018501909152818152606093909291908301828280156103c657602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116103a8575b5050505050905090565b6134718061064883390190565b600082601f8301126103ed578081fd5b813567ffffffffffffffff8082111561040857610408610631565b604051601f8301601f19168101602001828111828210171561042c5761042c610631565b604052828152848301602001861015610443578384fd5b82602086016020830137918201602001929092529392505050565b60006020828403121561046f578081fd5b81356001600160a01b0381168114610485578182fd5b9392505050565b60006020828403121561049d578081fd5b813567ffffffffffffffff8111156104b3578182fd5b6104bf848285016103dd565b949350505050565b600080604083850312156104d9578081fd5b823567ffffffffffffffff8111156104ef578182fd5b6104fb858286016103dd565b95602094909401359450505050565b60008151808452610522816020860160208601610601565b601f01601f19169290920160200192915050565b60008251610548818460208701610601565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b03831681526040602082018190526000906104bf9083018461050a565b6020808252825182820181905260009190848201906040850190845b818110156105cb5783516001600160a01b0316835292840192918401916001016105a6565b50909695505050505050565b6000604082526105ea604083018561050a565b905060018060a01b03831660208301529392505050565b60005b8381101561061c578181015183820152602001610604565b8381111561062b576000848401525b50505050565b634e487b7160e01b600052604160045260246000fdfe60806040523480156200001157600080fd5b50604051620034713803806200347183398101604081905262000034916200012e565b600280546001600160a01b0319163217905580516200005b90600790602084019062000088565b5050600a80546001600160a01b0319166001600160a01b0392909216919091179055600060135562000273565b828054620000969062000220565b90600052602060002090601f016020900481019282620000ba576000855562000105565b82601f10620000d557805160ff191683800117855562000105565b8280016001018555821562000105579182015b8281111562000105578251825591602001919060010190620000e8565b506200011392915062000117565b5090565b5b8082111562000113576000815560010162000118565b6000806040838503121562000141578182fd5b82516001600160a01b038116811462000158578283fd5b602084810151919350906001600160401b038082111562000177578384fd5b818601915086601f8301126200018b578384fd5b815181811115620001a057620001a06200025d565b604051601f8201601f1916810185018381118282101715620001c657620001c66200025d565b6040528181528382018501891015620001dd578586fd5b8592505b81831015620002005783830185015181840186015291840191620001e1565b818311156200021157858583830101525b80955050505050509250929050565b6002810460018216806200023557607f821691505b602082108114156200025757634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b6131ee80620002836000396000f3fe6080604052600436106102135760003560e01c80637e4115ba11610118578063c127c247116100a0578063d7def8e71161006f578063d7def8e7146105fe578063de8fa4311461061e578063f155966314610633578063f59e4f6514610653578063f5baf0d71461066857610225565b8063c127c2471461057e578063c21be6ae1461059e578063ca224313146105be578063cc184948146105de57610225565b8063a230c524116100e7578063a230c524146104f4578063a6f9dae114610514578063acf36e5314610534578063b6afd2ca14610554578063b766f86f1461056957610225565b80637e4115ba14610474578063804d74701461049457806381bc3f8c146104b4578063918f9687146104d457610225565b806332a1e1641161019b578063530554811161016a57806353055481146103ec57806354fd4d501461040c57806357a325341461042157806360a1da831461044157806378bef78b1461046157610225565b806332a1e1641461035f578063363454ee1461037f57806345ca25ed146103ac5780634635fd68146103cc57610225565b80630babba86116101e25780630babba86146102ca57806321670f22146102ea5780632615c3c7146102fd57806329b84d091461031d5780633113a2ae1461033d57610225565b806302d05d3f1461023057806305f182ae1461025b57806306fdde03146102885780630b1ca49a146102aa57610225565b366102255761022360003461067d565b005b61022360003461067d565b34801561023c57600080fd5b50610245610df1565b6040516102529190612951565b60405180910390f35b34801561026757600080fd5b5061027b6102763660046126ac565b610e00565b6040516102529190613012565b34801561029457600080fd5b5061029d610e1d565b6040516102529190612b42565b3480156102b657600080fd5b506102236102c5366004612434565b610eab565b3480156102d657600080fd5b506102456102e536600461263c565b611072565b6102236102f83660046124c0565b61067d565b34801561030957600080fd5b5061022361031836600461272d565b61110a565b34801561032957600080fd5b506102236103383660046125fd565b6111d8565b34801561034957600080fd5b50610352611213565b6040516102529190612ab0565b34801561036b57600080fd5b5061022361037a366004612784565b611275565b34801561038b57600080fd5b5061039f61039a3660046126ac565b6112dd565b6040516102529190612afd565b3480156103b857600080fd5b506102236103c7366004612473565b6112fd565b3480156103d857600080fd5b5061029d6103e73660046127c6565b6113f7565b3480156103f857600080fd5b5061027b610407366004612434565b611422565b34801561041857600080fd5b5061029d611434565b34801561042d57600080fd5b5061027b61043c3660046126ac565b611441565b34801561044d57600080fd5b5061022361045c3660046126de565b61145e565b61022361046f366004612784565b611563565b34801561048057600080fd5b5061024561048f3660046126ac565b611591565b3480156104a057600080fd5b506102236104af3660046124eb565b6115b7565b3480156104c057600080fd5b5061029d6104cf366004612434565b6116d1565b3480156104e057600080fd5b506102236104ef3660046126ac565b6116ea565b34801561050057600080fd5b5061039f61050f366004612434565b6117b9565b34801561052057600080fd5b5061022361052f366004612434565b6117ce565b34801561054057600080fd5b5061022361054f366004612434565b61181a565b34801561056057600080fd5b5061035261186b565b34801561057557600080fd5b5061027b6118cb565b34801561058a57600080fd5b50610223610599366004612473565b6118d1565b3480156105aa57600080fd5b506102456105b93660046126ac565b611be9565b3480156105ca57600080fd5b5061027b6105d93660046126de565b611c0f565b3480156105ea57600080fd5b506102456105f9366004612784565b611c3c565b34801561060a57600080fd5b5061039f6106193660046126ac565b611c83565b34801561062a57600080fd5b5061027b611ca3565b34801561063f57600080fd5b5061022361064e366004612525565b611ca9565b34801561065f57600080fd5b5061029d611dc2565b34801561067457600080fd5b5061029d611dcf565b60008060003411801561069757506001600160a01b038416155b156106a8573492506001915061080f565b83905060008051602061319983398151915230826001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016106e79190612951565b60206040518083038186803b1580156106ff57600080fd5b505afa158015610713573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061073791906127de565b604051610745929190612a59565b60405180910390a16001600160a01b03808516600090815260126020526040908190205490516370a0823160e01b815285928416906370a082319061078e903090600401612951565b60206040518083038186803b1580156107a657600080fd5b505afa1580156107ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107de91906127de565b6107e891906130be565b101561080f5760405162461bcd60e51b815260040161080690612db9565b60405180910390fd5b6000805b600b54811015610de9576013541561088d57601354856014600b848154811061084c57634e487b7160e01b600052603260045260246000fd5b9060005260206000200160405161086391906128df565b90815260200160405180910390205461087c919061309f565b610886919061307f565b915061089d565b600b5461089a908661307f565b91505b8115610dd7578315610a7d57600d600b82815481106108cc57634e487b7160e01b600052603260045260246000fd5b906000526020600020016040516108e391906128df565b9081526040519081900360200190205460ff16156109c5576000600c600b838154811061092057634e487b7160e01b600052603260045260246000fd5b9060005260206000200160405161093791906128df565b908152604051908190036020018120546001600160a01b031690849061095c9061294e565b60006040518083038185875af1925050503d8060008114610999576040519150601f19603f3d011682016040523d82523d6000602084013e61099e565b606091505b50509050806109bf5760405162461bcd60e51b815260040161080690612c1d565b50610a78565b306001600160a01b03166378bef78b600b83815481106109f557634e487b7160e01b600052603260045260246000fd5b90600052602060002001846040518363ffffffff1660e01b8152600401610a1d929190612bc4565b600060405180830381600087803b158015610a3757600080fd5b505af1158015610a4b573d6000803e3d6000fd5b50505050600080516020613199833981519152600083604051610a6f929190612a1f565b60405180910390a15b610dd7565b600d600b8281548110610aa057634e487b7160e01b600052603260045260246000fd5b90600052602060002001604051610ab791906128df565b9081526040519081900360200190205460ff1615610d2257826001600160a01b031663a9059cbb600c600b8481548110610b0157634e487b7160e01b600052603260045260246000fd5b90600052602060002001604051610b1891906128df565b908152604051908190036020018120546001600160e01b031960e084901b168252610b53916001600160a01b03909116908690600401612a97565b602060405180830381600087803b158015610b6d57600080fd5b505af1158015610b81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba591906125dd565b506000600c600b8381548110610bcb57634e487b7160e01b600052603260045260246000fd5b90600052602060002001604051610be291906128df565b908152604051908190036020018120546001600160a01b031690610c0c9089908690602401612a97565b60408051601f198184030181529181526020820180516001600160e01b03166310b3879160e11b17905251610c4191906128c3565b6000604051808303816000865af19150503d8060008114610c7e576040519150601f19603f3d011682016040523d82523d6000602084013e610c83565b606091505b5050905080610ca45760405162461bcd60e51b815260040161080690612c7d565b600080516020613199833981519152600c600b8481548110610cd657634e487b7160e01b600052603260045260246000fd5b90600052602060002001604051610ced91906128df565b90815260405190819003602001812054610d14916001600160a01b039091169086906129e9565b60405180910390a150610dd7565b306001600160a01b0316632615c3c7600b8381548110610d5257634e487b7160e01b600052603260045260246000fd5b9060005260206000200188856040518463ffffffff1660e01b8152600401610d7c93929190612b83565b600060405180830381600087803b158015610d9657600080fd5b505af1158015610daa573d6000803e3d6000fd5b50505050600080516020613199833981519152600083604051610dce9291906129ad565b60405180910390a15b80610de18161313c565b915050610813565b505050505050565b600a546001600160a01b031681565b805160208183018101805160148252928201919093012091525481565b60078054610e2a90613101565b80601f0160208091040260200160405190810160405280929190818152602001828054610e5690613101565b8015610ea35780601f10610e7857610100808354040283529160200191610ea3565b820191906000526020600020905b815481529060010190602001808311610e8657829003601f168201915b505050505081565b6002546001600160a01b03163314610ed55760405162461bcd60e51b815260040161080690612f51565b60005b600054811015610f5457816001600160a01b031660008281548110610f0d57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b03161415610f425760008054634e487b7160e01b600052603260045260246000fd5b80610f4c8161313c565b915050610ed8565b506000805480610f7457634e487b7160e01b600052603160045260246000fd5b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b0383168252600481526040808320805460ff1916905560069091529081902090517f982d6fac85d22cbbe833f9fe4278a909ca0f3b24ecc8b1f10fe63736e3c7231391610ff091849190612989565b60405180910390a16001600160a01b038116600090815260066020526040808220905160059161101f916128df565b908152604080516020928190038301812080546001600160a01b0319166001600160a01b039586161790558281018083526000808352948616855260069093529220915161106e929190612210565b5050565b600a546040516305d5dd4360e11b81526000916001600160a01b0316908190630babba86906110ad908a908a908a908a908a90600401612b08565b602060405180830381600087803b1580156110c757600080fd5b505af11580156110db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ff9190612457565b979650505050505050565b60008290508160108560405161112091906128c3565b90815260200160405180910390206000856001600160a01b03166001600160a01b0316815260200190815260200160002060008282546111609190613067565b90915550506040516011906111769086906128c3565b9081526040805160209281900383019020805460018101825560009182528382200180546001600160a01b0319166001600160a01b03881690811790915581526012909252812080548492906111cd908490613067565b909155505050505050565b6002546001600160a01b031633146112025760405162461bcd60e51b815260040161080690612cbf565b61120e60038383612294565b505050565b6060600180548060200260200160405190810160405280929190818152602001828054801561126b57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161124d575b5050505050905090565b600a546001600160a01b0316331461129f5760405162461bcd60e51b815260040161080690612f9a565b806014836040516112b091906128c3565b90815260200160405180910390208190555080601360008282546112d49190613067565b90915550505050565b8051602081830181018051600d8252928201919093012091525460ff1681565b6001600160a01b03821633148061131e57506002546001600160a01b031633145b8061133157506001600160a01b03821632145b61134d5760405162461bcd60e51b815260040161080690612eff565b8160058260405161135e91906128c3565b908152604080516020928190038301812080546001600160a01b0319166001600160a01b039586161790559285166000908152600690925290207ffdcc9059d3426f73949b49e5d977553aa298184439da800d66f48959d9cc76b0916113c691908490612b96565b60405180910390a16001600160a01b0382166000908152600660209081526040909120825161120e92840190612210565b600b818154811061140757600080fd5b906000526020600020016000915090508054610e2a90613101565b60126020526000908152604090205481565b60088054610e2a90613101565b8051602081830181018051600f8252928201919093012091525481565b600d8260405161146e91906128c3565b9081526040519081900360200190205460ff161561149e5760405162461bcd60e51b815260040161080690612fdb565b60006001600160a01b0316600c836040516114b991906128c3565b908152604051908190036020019020546001600160a01b031614156115195780600c836040516114e991906128c3565b90815260405190819003602001902080546001600160a01b03929092166001600160a01b03199092169190911790555b6115238282611ddc565b61152d8282611f39565b6001600d8360405161153f91906128c3565b908152604051908190036020019020805491151560ff199092169190911790555050565b80600f8360405161157491906128c3565b908152602001604051809103902060008282546112d49190613067565b80516020818301810180516005825292820191909301209152546001600160a01b031681565b600a546001600160a01b031633146115e15760405162461bcd60e51b815260040161080690612e91565b60005b815181101561106e57600082828151811061160f57634e487b7160e01b600052603260045260246000fd5b60200260200101519050600e8160405161162991906128c3565b9081526040519081900360200190205460ff161561164757506116bf565b6001600e8260405161165991906128c3565b90815260405160209181900382019020805460ff191692151592909217909155600b805460018101825560009190915282516116bc927f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db990920191840190612210565b50505b806116c98161313c565b9150506115e4565b60066020526000908152604090208054610e2a90613101565b600a546001600160a01b031633146117145760405162461bcd60e51b815260040161080690612e91565b600e8160405161172491906128c3565b9081526040519081900360200190205460ff1615611741576117b6565b6001600e8260405161175391906128c3565b90815260405160209181900382019020805460ff191692151592909217909155600b8054600181018255600091909152825161106e927f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db990920191840190612210565b50565b60046020526000908152604090205460ff1681565b6002546001600160a01b031633146117f85760405162461bcd60e51b815260040161080690612d25565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6001805480820182556000919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180546001600160a01b0319166001600160a01b0392909216919091179055565b6060600080548060200260200160405190810160405280929190818152602001828054801561126b576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831161124d575050505050905090565b60135481565b3360009081526004602052604090205460ff161515600114806118fe57506002546001600160a01b031633145b61191a5760405162461bcd60e51b815260040161080690612f51565b6001600160a01b03821660009081526004602052604090205460ff16156119535760405162461bcd60e51b815260040161080690612d5c565b60006001600160a01b031660058260405161196e91906128c3565b908152604051908190036020019020546001600160a01b0316146119a45760405162461bcd60e51b815260040161080690612cf6565b600080546001810182557f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5630180546001600160a01b0319166001600160a01b03851690811790915581526006602090815260409091208251611a0892840190612210565b5081600582604051611a1a91906128c3565b90815260408051918290036020908101832080546001600160a01b039586166001600160a01b031990911617905592851660008181526004909452908320805460ff19166001179055606091611a74903090602401612951565b60408051601f198184030181529181526020820180516001600160e01b031663acf36e5360e01b17905251611aa991906128c3565b600060405180830381855afa9150503d8060008114611ae4576040519150601f19603f3d011682016040523d82523d6000602084013e611ae9565b606091505b5090925090508115611baa57836001600160a01b031630604051602401611b109190612951565b60408051601f198184030181529181526020820180516001600160e01b031663acf36e5360e01b17905251611b4591906128c3565b6000604051808303816000865af19150503d8060008114611b82576040519150601f19603f3d011682016040523d82523d6000602084013e611b87565b606091505b50508092505081611baa5760405162461bcd60e51b815260040161080690612c46565b7f7c803c00251fe8138e27cfa8286be8d98625e5f6476ca6ca594f682362b711208484604051611bdb929190612965565b60405180910390a150505050565b8051602081830181018051600c825292820191909301209152546001600160a01b031681565b81516020818401810180516010825292820194820194909420919093529091526000908152604090205481565b81516020818401810180516011825292820191850191909120919052805482908110611c6757600080fd5b6000918252602090912001546001600160a01b03169150829050565b8051602081830181018051600e8252928201919093012091525460ff1681565b600b5490565b600a546001600160a01b03163314611cd35760405162461bcd60e51b815260040161080690612f9a565b8051825114611cf45760405162461bcd60e51b815260040161080690612ec8565b60005b825181101561120e57818181518110611d2057634e487b7160e01b600052603260045260246000fd5b60200260200101516014848381518110611d4a57634e487b7160e01b600052603260045260246000fd5b6020026020010151604051611d5f91906128c3565b908152602001604051809103902081905550818181518110611d9157634e487b7160e01b600052603260045260246000fd5b602002602001015160136000828254611daa9190613067565b90915550819050611dba8161313c565b915050611cf7565b60098054610e2a90613101565b60038054610e2a90613101565b600a546001600160a01b03163314611e065760405162461bcd60e51b815260040161080690612e46565b6000600f83604051611e1891906128c3565b9081526040519081900360200190205490506001600160a01b038216611e505760405162461bcd60e51b815260040161080690612be6565b7f0a7f9345f368230a861177dbb51e621758873e87d9dbf2358bea930b17e661d0838383604051611e8393929190612b55565b60405180910390a18015611f1257600080836001600160a01b031683604051611eab9061294e565b60006040518083038185875af1925050503d8060008114611ee8576040519150601f19603f3d011682016040523d82523d6000602084013e611eed565b606091505b509150915081611f0f5760405162461bcd60e51b815260040161080690612d8a565b50505b6000600f84604051611f2491906128c3565b90815260405190819003602001902055505050565b600a546001600160a01b03163314611f635760405162461bcd60e51b815260040161080690612dfa565b6000601183604051611f7591906128c3565b9081526040805191829003602090810183208054808302850183019093528284529190830182828015611fd157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611fb3575b5050505050905060005b601184604051611feb91906128c3565b9081526040519081900360200190205481101561220a57600082828151811061202457634e487b7160e01b600052603260045260246000fd5b60200260200101519050600060108660405161204091906128c3565b9081526020016040518091039020600085858151811061207057634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002054905060008111156121f55760006010876040516120b691906128c3565b908152602001604051809103902060008686815181106120e657634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002081905550806012600086868151811061213757634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020600082825461216e91906130be565b909155505060405163a9059cbb60e01b81526001600160a01b0383169063a9059cbb906121a19088908590600401612a97565b602060405180830381600087803b1580156121bb57600080fd5b505af11580156121cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121f391906125dd565b505b505080806122029061313c565b915050611fdb565b50505050565b82805461221c90613101565b90600052602060002090601f01602090048101928261223e5760008555612284565b82601f1061225757805160ff1916838001178555612284565b82800160010185558215612284579182015b82811115612284578251825591602001919060010190612269565b50612290929150612308565b5090565b8280546122a090613101565b90600052602060002090601f0160209004810192826122c25760008555612284565b82601f106122db5782800160ff19823516178555612284565b82800160010185558215612284579182015b828111156122845782358255916020019190600101906122ed565b5b808211156122905760008155600101612309565b600082601f83011261232d578081fd5b8135602061234261233d83613044565b61301b565b82815281810190858301855b8581101561237757612365898684358b01016123ca565b8452928401929084019060010161234e565b5090979650505050505050565b60008083601f840112612395578182fd5b5081356001600160401b038111156123ab578182fd5b6020830191508360208285010111156123c357600080fd5b9250929050565b600082601f8301126123da578081fd5b81356001600160401b038111156123f3576123f361316d565b612406601f8201601f191660200161301b565b81815284602083860101111561241a578283fd5b816020850160208301379081016020019190915292915050565b600060208284031215612445578081fd5b813561245081613183565b9392505050565b600060208284031215612468578081fd5b815161245081613183565b60008060408385031215612485578081fd5b823561249081613183565b915060208301356001600160401b038111156124aa578182fd5b6124b6858286016123ca565b9150509250929050565b600080604083850312156124d2578182fd5b82356124dd81613183565b946020939093013593505050565b6000602082840312156124fc578081fd5b81356001600160401b03811115612511578182fd5b61251d8482850161231d565b949350505050565b60008060408385031215612537578182fd5b82356001600160401b038082111561254d578384fd5b6125598683870161231d565b935060209150818501358181111561256f578384fd5b85019050601f81018613612581578283fd5b803561258f61233d82613044565b81815283810190838501858402850186018a10156125ab578687fd5b8694505b838510156125cd5780358352600194909401939185019185016125af565b5080955050505050509250929050565b6000602082840312156125ee578081fd5b81518015158114612450578182fd5b6000806020838503121561260f578182fd5b82356001600160401b03811115612624578283fd5b61263085828601612384565b90969095509350505050565b600080600080600060608688031215612653578081fd5b85356001600160401b0380821115612669578283fd5b61267589838a01612384565b9097509550602088013591508082111561268d578283fd5b5061269a88828901612384565b96999598509660400135949350505050565b6000602082840312156126bd578081fd5b81356001600160401b038111156126d2578182fd5b61251d848285016123ca565b600080604083850312156126f0578182fd5b82356001600160401b03811115612705578283fd5b612711858286016123ca565b925050602083013561272281613183565b809150509250929050565b600080600060608486031215612741578283fd5b83356001600160401b03811115612756578384fd5b612762868287016123ca565b935050602084013561277381613183565b929592945050506040919091013590565b60008060408385031215612796578182fd5b82356001600160401b038111156127ab578283fd5b6127b7858286016123ca565b95602094909401359450505050565b6000602082840312156127d7578081fd5b5035919050565b6000602082840312156127ef578081fd5b5051919050565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b600081518084526128388160208601602086016130d5565b601f01601f19169290920160200192915050565b6000815461285981613101565b808552602060018381168015612876576001811461288a576128b8565b60ff198516888401526040880195506128b8565b866000528260002060005b858110156128b05781548a8201860152908301908401612895565b890184019650505b505050505092915050565b600082516128d58184602087016130d5565b9190910192915050565b60008083546128ed81613101565b60018281168015612905576001811461291657612942565b60ff19841687528287019450612942565b8786526020808720875b858110156129395781548a820152908401908201612920565b50505082870194505b50929695505050505050565b90565b6001600160a01b0391909116815260200190565b6001600160a01b038316815260406020820181905260009061251d90830184612820565b6001600160a01b038316815260406020820181905260009061251d9083018461284c565b6001600160a01b03929092168252606060208301819052600b908301526a053544f52454445524332360ac1b6080830152604082015260a00190565b6001600160a01b0392909216825260606020830181905260059083015264045524332360dc1b6080830152604082015260a00190565b6001600160a01b03929092168252606060208301819052600990830152680a6a89ea48a888aa8960bb1b6080830152604082015260a00190565b6001600160a01b03929092168252606060208301819052600d908301526c60746f6b656e62616c616e636560981b6080830152604082015260a00190565b6001600160a01b03929092168252602082015260400190565b6020808252825182820181905260009190848201906040850190845b81811015612af15783516001600160a01b031683529284019291840191600101612acc565b50909695505050505050565b901515815260200190565b600060608252612b1c6060830187896127f6565b8281036020840152612b2f8186886127f6565b9150508260408301529695505050505050565b6000602082526124506020830184612820565b600060608252612b686060830186612820565b6001600160a01b039490941660208301525060400152919050565b600060608252612b68606083018661284c565b600060408252612ba9604083018561284c565b8281036020840152612bbb8185612820565b95945050505050565b600060408252612bd7604083018561284c565b90508260208301529392505050565b6020808252601b908201527f496e76616c69642062656e656669636961727920616464726573730000000000604082015260600190565b6020808252600f908201526e151c985b9cd9995c8819985a5b1959608a1b604082015260600190565b60208082526017908201527f4661696c656420746f2063726561746520706172656e74000000000000000000604082015260600190565b60208082526022908201527f556e61626c6520746f2063616c6c20746865207265776172642066756e63746960408201526137b760f11b606082015260800190565b6020808252601f908201527f4f6e6c79206f776e65722063616e2073657420746865206d616e696665737400604082015260600190565b6020808252601590820152742730b6b29034b99030b63932b0b23c903a30b5b2b760591b604082015260600190565b6020808252601f908201527f4f6e6c79206f776e65722063616e206368616e676520746865206f776e657200604082015260600190565b60208082526014908201527313595b58995c88185b1c9958591e48185919195960621b604082015260600190565b60208082526015908201527410db185a5b5a5b99c8115d1a195c8819985a5b1959605a1b604082015260600190565b60208082526021908201527f4e6f7420656e6f75676820746f6b656e7320696e2074686520636f6e747261636040820152601d60fa1b606082015260800190565b6020808252602c908201527f4f6e6c792063726561746f722063616e207375626d697420616e20757365722060408201526b636c61696d20546f6b656e7360a01b606082015260800190565b6020808252602b908201527f4f6e6c792063726561746f722063616e207375626d697420616e20757365722060408201526a31b630b4b69022ba3432b960a91b606082015260800190565b6020808252601c908201527f4f6e6c792063726561746f722063616e20616464206d656d6265727300000000604082015260600190565b6020808252601a908201527f4172726179206c656e6774687320646f206e6f74206d61746368000000000000604082015260600190565b60208082526032908201527f4e616d65206368616e67652072657175657374206e6f742073656e742066726f604082015271369036b2b6b132b9103737b91037bbb732b960711b606082015260800190565b60208082526029908201527f52657175657374207375626d69747465642062792061206e6f6e2d6d656d626560408201526872206164647265737360b81b606082015260800190565b60208082526021908201527f4f6e6c792063726561746f722063616e2073657420617070726563696174696f6040820152603760f91b606082015260800190565b60208082526018908201527f557365722068617320616c726561647920636c61696d65640000000000000000604082015260600190565b90815260200190565b6040518181016001600160401b038111828210171561303c5761303c61316d565b604052919050565b60006001600160401b0382111561305d5761305d61316d565b5060209081020190565b6000821982111561307a5761307a613157565b500190565b60008261309a57634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156130b9576130b9613157565b500290565b6000828210156130d0576130d0613157565b500390565b60005b838110156130f05781810151838201526020016130d8565b8381111561220a5750506000910152565b60028104600182168061311557607f821691505b6020821081141561313657634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561315057613150613157565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146117b657600080fdfe04481a311a9d6c25d5003a3df0e3a0b58e5647e088a39de363764e28532a78b7a2646970667358221220eb1ffe10b8f64ea61ff357e1b9aab4547972b57f6dc9e4933b310df7ea95665d64736f6c63430008000033a2646970667358221220ec8703375005d3f0d39253ffe408024feed84427eb3d9ed4955f3651e8f5eb2764736f6c63430008000033","deployedBytecode":"0x608060405234801561001057600080fd5b506004361061004c5760003560e01c80637e4115ba14610051578063dfee57171461007a578063e43cb2701461009a578063e5c23374146100ad575b600080fd5b61006461005f36600461048c565b6100b5565b6040516100719190610552565b60405180910390f35b61008d61008836600461045e565b6100db565b604051610071919061058a565b6100646100a83660046104c7565b61014f565b61008d610348565b80516020818301810180516001825292820191909301209152546001600160a01b031681565b6001600160a01b0381166000908152602081815260409182902080548351818402810184019094528084526060939283018282801561014357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610125575b50505050509050919050565b6000806001600160a01b031660018460405161016b9190610536565b908152604051908190036020019020546001600160a01b031611156101ba5760018360405161019a9190610536565b908152604051908190036020019020546001600160a01b03169050610342565b600033846040516101ca906103d0565b6101d5929190610566565b604051809103906000f0801580156101f1573d6000803e3d6000fd5b50600060208181527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5805460018181019092557ff0df3dcda05b4fbd9c655cde3d5ceb211e019e72ec816e127a59e7195f2cd7f50180546001600160a01b0386166001600160a01b03199182168117909255338086526040862080549485018155865293909420909101805490931617909155909150819032146102c657326000908152602081815260408220805460018101825590835291200180546001600160a01b0319166001600160a01b0383161790555b806001866040516102d79190610536565b90815260405190819003602001812080546001600160a01b03939093166001600160a01b0319909316929092179091557f10d047031611691941b661f2160741619b4030812eb79997f4b3734ed5605a439061033690879084906105d7565b60405180910390a19150505b92915050565b600080805260209081527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb580546040805182850281018501909152818152606093909291908301828280156103c657602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116103a8575b5050505050905090565b6134718061064883390190565b600082601f8301126103ed578081fd5b813567ffffffffffffffff8082111561040857610408610631565b604051601f8301601f19168101602001828111828210171561042c5761042c610631565b604052828152848301602001861015610443578384fd5b82602086016020830137918201602001929092529392505050565b60006020828403121561046f578081fd5b81356001600160a01b0381168114610485578182fd5b9392505050565b60006020828403121561049d578081fd5b813567ffffffffffffffff8111156104b3578182fd5b6104bf848285016103dd565b949350505050565b600080604083850312156104d9578081fd5b823567ffffffffffffffff8111156104ef578182fd5b6104fb858286016103dd565b95602094909401359450505050565b60008151808452610522816020860160208601610601565b601f01601f19169290920160200192915050565b60008251610548818460208701610601565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b03831681526040602082018190526000906104bf9083018461050a565b6020808252825182820181905260009190848201906040850190845b818110156105cb5783516001600160a01b0316835292840192918401916001016105a6565b50909695505050505050565b6000604082526105ea604083018561050a565b905060018060a01b03831660208301529392505050565b60005b8381101561061c578181015183820152602001610604565b8381111561062b576000848401525b50505050565b634e487b7160e01b600052604160045260246000fdfe60806040523480156200001157600080fd5b50604051620034713803806200347183398101604081905262000034916200012e565b600280546001600160a01b0319163217905580516200005b90600790602084019062000088565b5050600a80546001600160a01b0319166001600160a01b0392909216919091179055600060135562000273565b828054620000969062000220565b90600052602060002090601f016020900481019282620000ba576000855562000105565b82601f10620000d557805160ff191683800117855562000105565b8280016001018555821562000105579182015b8281111562000105578251825591602001919060010190620000e8565b506200011392915062000117565b5090565b5b8082111562000113576000815560010162000118565b6000806040838503121562000141578182fd5b82516001600160a01b038116811462000158578283fd5b602084810151919350906001600160401b038082111562000177578384fd5b818601915086601f8301126200018b578384fd5b815181811115620001a057620001a06200025d565b604051601f8201601f1916810185018381118282101715620001c657620001c66200025d565b6040528181528382018501891015620001dd578586fd5b8592505b81831015620002005783830185015181840186015291840191620001e1565b818311156200021157858583830101525b80955050505050509250929050565b6002810460018216806200023557607f821691505b602082108114156200025757634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b6131ee80620002836000396000f3fe6080604052600436106102135760003560e01c80637e4115ba11610118578063c127c247116100a0578063d7def8e71161006f578063d7def8e7146105fe578063de8fa4311461061e578063f155966314610633578063f59e4f6514610653578063f5baf0d71461066857610225565b8063c127c2471461057e578063c21be6ae1461059e578063ca224313146105be578063cc184948146105de57610225565b8063a230c524116100e7578063a230c524146104f4578063a6f9dae114610514578063acf36e5314610534578063b6afd2ca14610554578063b766f86f1461056957610225565b80637e4115ba14610474578063804d74701461049457806381bc3f8c146104b4578063918f9687146104d457610225565b806332a1e1641161019b578063530554811161016a57806353055481146103ec57806354fd4d501461040c57806357a325341461042157806360a1da831461044157806378bef78b1461046157610225565b806332a1e1641461035f578063363454ee1461037f57806345ca25ed146103ac5780634635fd68146103cc57610225565b80630babba86116101e25780630babba86146102ca57806321670f22146102ea5780632615c3c7146102fd57806329b84d091461031d5780633113a2ae1461033d57610225565b806302d05d3f1461023057806305f182ae1461025b57806306fdde03146102885780630b1ca49a146102aa57610225565b366102255761022360003461067d565b005b61022360003461067d565b34801561023c57600080fd5b50610245610df1565b6040516102529190612951565b60405180910390f35b34801561026757600080fd5b5061027b6102763660046126ac565b610e00565b6040516102529190613012565b34801561029457600080fd5b5061029d610e1d565b6040516102529190612b42565b3480156102b657600080fd5b506102236102c5366004612434565b610eab565b3480156102d657600080fd5b506102456102e536600461263c565b611072565b6102236102f83660046124c0565b61067d565b34801561030957600080fd5b5061022361031836600461272d565b61110a565b34801561032957600080fd5b506102236103383660046125fd565b6111d8565b34801561034957600080fd5b50610352611213565b6040516102529190612ab0565b34801561036b57600080fd5b5061022361037a366004612784565b611275565b34801561038b57600080fd5b5061039f61039a3660046126ac565b6112dd565b6040516102529190612afd565b3480156103b857600080fd5b506102236103c7366004612473565b6112fd565b3480156103d857600080fd5b5061029d6103e73660046127c6565b6113f7565b3480156103f857600080fd5b5061027b610407366004612434565b611422565b34801561041857600080fd5b5061029d611434565b34801561042d57600080fd5b5061027b61043c3660046126ac565b611441565b34801561044d57600080fd5b5061022361045c3660046126de565b61145e565b61022361046f366004612784565b611563565b34801561048057600080fd5b5061024561048f3660046126ac565b611591565b3480156104a057600080fd5b506102236104af3660046124eb565b6115b7565b3480156104c057600080fd5b5061029d6104cf366004612434565b6116d1565b3480156104e057600080fd5b506102236104ef3660046126ac565b6116ea565b34801561050057600080fd5b5061039f61050f366004612434565b6117b9565b34801561052057600080fd5b5061022361052f366004612434565b6117ce565b34801561054057600080fd5b5061022361054f366004612434565b61181a565b34801561056057600080fd5b5061035261186b565b34801561057557600080fd5b5061027b6118cb565b34801561058a57600080fd5b50610223610599366004612473565b6118d1565b3480156105aa57600080fd5b506102456105b93660046126ac565b611be9565b3480156105ca57600080fd5b5061027b6105d93660046126de565b611c0f565b3480156105ea57600080fd5b506102456105f9366004612784565b611c3c565b34801561060a57600080fd5b5061039f6106193660046126ac565b611c83565b34801561062a57600080fd5b5061027b611ca3565b34801561063f57600080fd5b5061022361064e366004612525565b611ca9565b34801561065f57600080fd5b5061029d611dc2565b34801561067457600080fd5b5061029d611dcf565b60008060003411801561069757506001600160a01b038416155b156106a8573492506001915061080f565b83905060008051602061319983398151915230826001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016106e79190612951565b60206040518083038186803b1580156106ff57600080fd5b505afa158015610713573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061073791906127de565b604051610745929190612a59565b60405180910390a16001600160a01b03808516600090815260126020526040908190205490516370a0823160e01b815285928416906370a082319061078e903090600401612951565b60206040518083038186803b1580156107a657600080fd5b505afa1580156107ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107de91906127de565b6107e891906130be565b101561080f5760405162461bcd60e51b815260040161080690612db9565b60405180910390fd5b6000805b600b54811015610de9576013541561088d57601354856014600b848154811061084c57634e487b7160e01b600052603260045260246000fd5b9060005260206000200160405161086391906128df565b90815260200160405180910390205461087c919061309f565b610886919061307f565b915061089d565b600b5461089a908661307f565b91505b8115610dd7578315610a7d57600d600b82815481106108cc57634e487b7160e01b600052603260045260246000fd5b906000526020600020016040516108e391906128df565b9081526040519081900360200190205460ff16156109c5576000600c600b838154811061092057634e487b7160e01b600052603260045260246000fd5b9060005260206000200160405161093791906128df565b908152604051908190036020018120546001600160a01b031690849061095c9061294e565b60006040518083038185875af1925050503d8060008114610999576040519150601f19603f3d011682016040523d82523d6000602084013e61099e565b606091505b50509050806109bf5760405162461bcd60e51b815260040161080690612c1d565b50610a78565b306001600160a01b03166378bef78b600b83815481106109f557634e487b7160e01b600052603260045260246000fd5b90600052602060002001846040518363ffffffff1660e01b8152600401610a1d929190612bc4565b600060405180830381600087803b158015610a3757600080fd5b505af1158015610a4b573d6000803e3d6000fd5b50505050600080516020613199833981519152600083604051610a6f929190612a1f565b60405180910390a15b610dd7565b600d600b8281548110610aa057634e487b7160e01b600052603260045260246000fd5b90600052602060002001604051610ab791906128df565b9081526040519081900360200190205460ff1615610d2257826001600160a01b031663a9059cbb600c600b8481548110610b0157634e487b7160e01b600052603260045260246000fd5b90600052602060002001604051610b1891906128df565b908152604051908190036020018120546001600160e01b031960e084901b168252610b53916001600160a01b03909116908690600401612a97565b602060405180830381600087803b158015610b6d57600080fd5b505af1158015610b81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba591906125dd565b506000600c600b8381548110610bcb57634e487b7160e01b600052603260045260246000fd5b90600052602060002001604051610be291906128df565b908152604051908190036020018120546001600160a01b031690610c0c9089908690602401612a97565b60408051601f198184030181529181526020820180516001600160e01b03166310b3879160e11b17905251610c4191906128c3565b6000604051808303816000865af19150503d8060008114610c7e576040519150601f19603f3d011682016040523d82523d6000602084013e610c83565b606091505b5050905080610ca45760405162461bcd60e51b815260040161080690612c7d565b600080516020613199833981519152600c600b8481548110610cd657634e487b7160e01b600052603260045260246000fd5b90600052602060002001604051610ced91906128df565b90815260405190819003602001812054610d14916001600160a01b039091169086906129e9565b60405180910390a150610dd7565b306001600160a01b0316632615c3c7600b8381548110610d5257634e487b7160e01b600052603260045260246000fd5b9060005260206000200188856040518463ffffffff1660e01b8152600401610d7c93929190612b83565b600060405180830381600087803b158015610d9657600080fd5b505af1158015610daa573d6000803e3d6000fd5b50505050600080516020613199833981519152600083604051610dce9291906129ad565b60405180910390a15b80610de18161313c565b915050610813565b505050505050565b600a546001600160a01b031681565b805160208183018101805160148252928201919093012091525481565b60078054610e2a90613101565b80601f0160208091040260200160405190810160405280929190818152602001828054610e5690613101565b8015610ea35780601f10610e7857610100808354040283529160200191610ea3565b820191906000526020600020905b815481529060010190602001808311610e8657829003601f168201915b505050505081565b6002546001600160a01b03163314610ed55760405162461bcd60e51b815260040161080690612f51565b60005b600054811015610f5457816001600160a01b031660008281548110610f0d57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b03161415610f425760008054634e487b7160e01b600052603260045260246000fd5b80610f4c8161313c565b915050610ed8565b506000805480610f7457634e487b7160e01b600052603160045260246000fd5b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b0383168252600481526040808320805460ff1916905560069091529081902090517f982d6fac85d22cbbe833f9fe4278a909ca0f3b24ecc8b1f10fe63736e3c7231391610ff091849190612989565b60405180910390a16001600160a01b038116600090815260066020526040808220905160059161101f916128df565b908152604080516020928190038301812080546001600160a01b0319166001600160a01b039586161790558281018083526000808352948616855260069093529220915161106e929190612210565b5050565b600a546040516305d5dd4360e11b81526000916001600160a01b0316908190630babba86906110ad908a908a908a908a908a90600401612b08565b602060405180830381600087803b1580156110c757600080fd5b505af11580156110db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ff9190612457565b979650505050505050565b60008290508160108560405161112091906128c3565b90815260200160405180910390206000856001600160a01b03166001600160a01b0316815260200190815260200160002060008282546111609190613067565b90915550506040516011906111769086906128c3565b9081526040805160209281900383019020805460018101825560009182528382200180546001600160a01b0319166001600160a01b03881690811790915581526012909252812080548492906111cd908490613067565b909155505050505050565b6002546001600160a01b031633146112025760405162461bcd60e51b815260040161080690612cbf565b61120e60038383612294565b505050565b6060600180548060200260200160405190810160405280929190818152602001828054801561126b57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161124d575b5050505050905090565b600a546001600160a01b0316331461129f5760405162461bcd60e51b815260040161080690612f9a565b806014836040516112b091906128c3565b90815260200160405180910390208190555080601360008282546112d49190613067565b90915550505050565b8051602081830181018051600d8252928201919093012091525460ff1681565b6001600160a01b03821633148061131e57506002546001600160a01b031633145b8061133157506001600160a01b03821632145b61134d5760405162461bcd60e51b815260040161080690612eff565b8160058260405161135e91906128c3565b908152604080516020928190038301812080546001600160a01b0319166001600160a01b039586161790559285166000908152600690925290207ffdcc9059d3426f73949b49e5d977553aa298184439da800d66f48959d9cc76b0916113c691908490612b96565b60405180910390a16001600160a01b0382166000908152600660209081526040909120825161120e92840190612210565b600b818154811061140757600080fd5b906000526020600020016000915090508054610e2a90613101565b60126020526000908152604090205481565b60088054610e2a90613101565b8051602081830181018051600f8252928201919093012091525481565b600d8260405161146e91906128c3565b9081526040519081900360200190205460ff161561149e5760405162461bcd60e51b815260040161080690612fdb565b60006001600160a01b0316600c836040516114b991906128c3565b908152604051908190036020019020546001600160a01b031614156115195780600c836040516114e991906128c3565b90815260405190819003602001902080546001600160a01b03929092166001600160a01b03199092169190911790555b6115238282611ddc565b61152d8282611f39565b6001600d8360405161153f91906128c3565b908152604051908190036020019020805491151560ff199092169190911790555050565b80600f8360405161157491906128c3565b908152602001604051809103902060008282546112d49190613067565b80516020818301810180516005825292820191909301209152546001600160a01b031681565b600a546001600160a01b031633146115e15760405162461bcd60e51b815260040161080690612e91565b60005b815181101561106e57600082828151811061160f57634e487b7160e01b600052603260045260246000fd5b60200260200101519050600e8160405161162991906128c3565b9081526040519081900360200190205460ff161561164757506116bf565b6001600e8260405161165991906128c3565b90815260405160209181900382019020805460ff191692151592909217909155600b805460018101825560009190915282516116bc927f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db990920191840190612210565b50505b806116c98161313c565b9150506115e4565b60066020526000908152604090208054610e2a90613101565b600a546001600160a01b031633146117145760405162461bcd60e51b815260040161080690612e91565b600e8160405161172491906128c3565b9081526040519081900360200190205460ff1615611741576117b6565b6001600e8260405161175391906128c3565b90815260405160209181900382019020805460ff191692151592909217909155600b8054600181018255600091909152825161106e927f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db990920191840190612210565b50565b60046020526000908152604090205460ff1681565b6002546001600160a01b031633146117f85760405162461bcd60e51b815260040161080690612d25565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6001805480820182556000919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180546001600160a01b0319166001600160a01b0392909216919091179055565b6060600080548060200260200160405190810160405280929190818152602001828054801561126b576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831161124d575050505050905090565b60135481565b3360009081526004602052604090205460ff161515600114806118fe57506002546001600160a01b031633145b61191a5760405162461bcd60e51b815260040161080690612f51565b6001600160a01b03821660009081526004602052604090205460ff16156119535760405162461bcd60e51b815260040161080690612d5c565b60006001600160a01b031660058260405161196e91906128c3565b908152604051908190036020019020546001600160a01b0316146119a45760405162461bcd60e51b815260040161080690612cf6565b600080546001810182557f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5630180546001600160a01b0319166001600160a01b03851690811790915581526006602090815260409091208251611a0892840190612210565b5081600582604051611a1a91906128c3565b90815260408051918290036020908101832080546001600160a01b039586166001600160a01b031990911617905592851660008181526004909452908320805460ff19166001179055606091611a74903090602401612951565b60408051601f198184030181529181526020820180516001600160e01b031663acf36e5360e01b17905251611aa991906128c3565b600060405180830381855afa9150503d8060008114611ae4576040519150601f19603f3d011682016040523d82523d6000602084013e611ae9565b606091505b5090925090508115611baa57836001600160a01b031630604051602401611b109190612951565b60408051601f198184030181529181526020820180516001600160e01b031663acf36e5360e01b17905251611b4591906128c3565b6000604051808303816000865af19150503d8060008114611b82576040519150601f19603f3d011682016040523d82523d6000602084013e611b87565b606091505b50508092505081611baa5760405162461bcd60e51b815260040161080690612c46565b7f7c803c00251fe8138e27cfa8286be8d98625e5f6476ca6ca594f682362b711208484604051611bdb929190612965565b60405180910390a150505050565b8051602081830181018051600c825292820191909301209152546001600160a01b031681565b81516020818401810180516010825292820194820194909420919093529091526000908152604090205481565b81516020818401810180516011825292820191850191909120919052805482908110611c6757600080fd5b6000918252602090912001546001600160a01b03169150829050565b8051602081830181018051600e8252928201919093012091525460ff1681565b600b5490565b600a546001600160a01b03163314611cd35760405162461bcd60e51b815260040161080690612f9a565b8051825114611cf45760405162461bcd60e51b815260040161080690612ec8565b60005b825181101561120e57818181518110611d2057634e487b7160e01b600052603260045260246000fd5b60200260200101516014848381518110611d4a57634e487b7160e01b600052603260045260246000fd5b6020026020010151604051611d5f91906128c3565b908152602001604051809103902081905550818181518110611d9157634e487b7160e01b600052603260045260246000fd5b602002602001015160136000828254611daa9190613067565b90915550819050611dba8161313c565b915050611cf7565b60098054610e2a90613101565b60038054610e2a90613101565b600a546001600160a01b03163314611e065760405162461bcd60e51b815260040161080690612e46565b6000600f83604051611e1891906128c3565b9081526040519081900360200190205490506001600160a01b038216611e505760405162461bcd60e51b815260040161080690612be6565b7f0a7f9345f368230a861177dbb51e621758873e87d9dbf2358bea930b17e661d0838383604051611e8393929190612b55565b60405180910390a18015611f1257600080836001600160a01b031683604051611eab9061294e565b60006040518083038185875af1925050503d8060008114611ee8576040519150601f19603f3d011682016040523d82523d6000602084013e611eed565b606091505b509150915081611f0f5760405162461bcd60e51b815260040161080690612d8a565b50505b6000600f84604051611f2491906128c3565b90815260405190819003602001902055505050565b600a546001600160a01b03163314611f635760405162461bcd60e51b815260040161080690612dfa565b6000601183604051611f7591906128c3565b9081526040805191829003602090810183208054808302850183019093528284529190830182828015611fd157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611fb3575b5050505050905060005b601184604051611feb91906128c3565b9081526040519081900360200190205481101561220a57600082828151811061202457634e487b7160e01b600052603260045260246000fd5b60200260200101519050600060108660405161204091906128c3565b9081526020016040518091039020600085858151811061207057634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002054905060008111156121f55760006010876040516120b691906128c3565b908152602001604051809103902060008686815181106120e657634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002081905550806012600086868151811061213757634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020600082825461216e91906130be565b909155505060405163a9059cbb60e01b81526001600160a01b0383169063a9059cbb906121a19088908590600401612a97565b602060405180830381600087803b1580156121bb57600080fd5b505af11580156121cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121f391906125dd565b505b505080806122029061313c565b915050611fdb565b50505050565b82805461221c90613101565b90600052602060002090601f01602090048101928261223e5760008555612284565b82601f1061225757805160ff1916838001178555612284565b82800160010185558215612284579182015b82811115612284578251825591602001919060010190612269565b50612290929150612308565b5090565b8280546122a090613101565b90600052602060002090601f0160209004810192826122c25760008555612284565b82601f106122db5782800160ff19823516178555612284565b82800160010185558215612284579182015b828111156122845782358255916020019190600101906122ed565b5b808211156122905760008155600101612309565b600082601f83011261232d578081fd5b8135602061234261233d83613044565b61301b565b82815281810190858301855b8581101561237757612365898684358b01016123ca565b8452928401929084019060010161234e565b5090979650505050505050565b60008083601f840112612395578182fd5b5081356001600160401b038111156123ab578182fd5b6020830191508360208285010111156123c357600080fd5b9250929050565b600082601f8301126123da578081fd5b81356001600160401b038111156123f3576123f361316d565b612406601f8201601f191660200161301b565b81815284602083860101111561241a578283fd5b816020850160208301379081016020019190915292915050565b600060208284031215612445578081fd5b813561245081613183565b9392505050565b600060208284031215612468578081fd5b815161245081613183565b60008060408385031215612485578081fd5b823561249081613183565b915060208301356001600160401b038111156124aa578182fd5b6124b6858286016123ca565b9150509250929050565b600080604083850312156124d2578182fd5b82356124dd81613183565b946020939093013593505050565b6000602082840312156124fc578081fd5b81356001600160401b03811115612511578182fd5b61251d8482850161231d565b949350505050565b60008060408385031215612537578182fd5b82356001600160401b038082111561254d578384fd5b6125598683870161231d565b935060209150818501358181111561256f578384fd5b85019050601f81018613612581578283fd5b803561258f61233d82613044565b81815283810190838501858402850186018a10156125ab578687fd5b8694505b838510156125cd5780358352600194909401939185019185016125af565b5080955050505050509250929050565b6000602082840312156125ee578081fd5b81518015158114612450578182fd5b6000806020838503121561260f578182fd5b82356001600160401b03811115612624578283fd5b61263085828601612384565b90969095509350505050565b600080600080600060608688031215612653578081fd5b85356001600160401b0380821115612669578283fd5b61267589838a01612384565b9097509550602088013591508082111561268d578283fd5b5061269a88828901612384565b96999598509660400135949350505050565b6000602082840312156126bd578081fd5b81356001600160401b038111156126d2578182fd5b61251d848285016123ca565b600080604083850312156126f0578182fd5b82356001600160401b03811115612705578283fd5b612711858286016123ca565b925050602083013561272281613183565b809150509250929050565b600080600060608486031215612741578283fd5b83356001600160401b03811115612756578384fd5b612762868287016123ca565b935050602084013561277381613183565b929592945050506040919091013590565b60008060408385031215612796578182fd5b82356001600160401b038111156127ab578283fd5b6127b7858286016123ca565b95602094909401359450505050565b6000602082840312156127d7578081fd5b5035919050565b6000602082840312156127ef578081fd5b5051919050565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b600081518084526128388160208601602086016130d5565b601f01601f19169290920160200192915050565b6000815461285981613101565b808552602060018381168015612876576001811461288a576128b8565b60ff198516888401526040880195506128b8565b866000528260002060005b858110156128b05781548a8201860152908301908401612895565b890184019650505b505050505092915050565b600082516128d58184602087016130d5565b9190910192915050565b60008083546128ed81613101565b60018281168015612905576001811461291657612942565b60ff19841687528287019450612942565b8786526020808720875b858110156129395781548a820152908401908201612920565b50505082870194505b50929695505050505050565b90565b6001600160a01b0391909116815260200190565b6001600160a01b038316815260406020820181905260009061251d90830184612820565b6001600160a01b038316815260406020820181905260009061251d9083018461284c565b6001600160a01b03929092168252606060208301819052600b908301526a053544f52454445524332360ac1b6080830152604082015260a00190565b6001600160a01b0392909216825260606020830181905260059083015264045524332360dc1b6080830152604082015260a00190565b6001600160a01b03929092168252606060208301819052600990830152680a6a89ea48a888aa8960bb1b6080830152604082015260a00190565b6001600160a01b03929092168252606060208301819052600d908301526c60746f6b656e62616c616e636560981b6080830152604082015260a00190565b6001600160a01b03929092168252602082015260400190565b6020808252825182820181905260009190848201906040850190845b81811015612af15783516001600160a01b031683529284019291840191600101612acc565b50909695505050505050565b901515815260200190565b600060608252612b1c6060830187896127f6565b8281036020840152612b2f8186886127f6565b9150508260408301529695505050505050565b6000602082526124506020830184612820565b600060608252612b686060830186612820565b6001600160a01b039490941660208301525060400152919050565b600060608252612b68606083018661284c565b600060408252612ba9604083018561284c565b8281036020840152612bbb8185612820565b95945050505050565b600060408252612bd7604083018561284c565b90508260208301529392505050565b6020808252601b908201527f496e76616c69642062656e656669636961727920616464726573730000000000604082015260600190565b6020808252600f908201526e151c985b9cd9995c8819985a5b1959608a1b604082015260600190565b60208082526017908201527f4661696c656420746f2063726561746520706172656e74000000000000000000604082015260600190565b60208082526022908201527f556e61626c6520746f2063616c6c20746865207265776172642066756e63746960408201526137b760f11b606082015260800190565b6020808252601f908201527f4f6e6c79206f776e65722063616e2073657420746865206d616e696665737400604082015260600190565b6020808252601590820152742730b6b29034b99030b63932b0b23c903a30b5b2b760591b604082015260600190565b6020808252601f908201527f4f6e6c79206f776e65722063616e206368616e676520746865206f776e657200604082015260600190565b60208082526014908201527313595b58995c88185b1c9958591e48185919195960621b604082015260600190565b60208082526015908201527410db185a5b5a5b99c8115d1a195c8819985a5b1959605a1b604082015260600190565b60208082526021908201527f4e6f7420656e6f75676820746f6b656e7320696e2074686520636f6e747261636040820152601d60fa1b606082015260800190565b6020808252602c908201527f4f6e6c792063726561746f722063616e207375626d697420616e20757365722060408201526b636c61696d20546f6b656e7360a01b606082015260800190565b6020808252602b908201527f4f6e6c792063726561746f722063616e207375626d697420616e20757365722060408201526a31b630b4b69022ba3432b960a91b606082015260800190565b6020808252601c908201527f4f6e6c792063726561746f722063616e20616464206d656d6265727300000000604082015260600190565b6020808252601a908201527f4172726179206c656e6774687320646f206e6f74206d61746368000000000000604082015260600190565b60208082526032908201527f4e616d65206368616e67652072657175657374206e6f742073656e742066726f604082015271369036b2b6b132b9103737b91037bbb732b960711b606082015260800190565b60208082526029908201527f52657175657374207375626d69747465642062792061206e6f6e2d6d656d626560408201526872206164647265737360b81b606082015260800190565b60208082526021908201527f4f6e6c792063726561746f722063616e2073657420617070726563696174696f6040820152603760f91b606082015260800190565b60208082526018908201527f557365722068617320616c726561647920636c61696d65640000000000000000604082015260600190565b90815260200190565b6040518181016001600160401b038111828210171561303c5761303c61316d565b604052919050565b60006001600160401b0382111561305d5761305d61316d565b5060209081020190565b6000821982111561307a5761307a613157565b500190565b60008261309a57634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156130b9576130b9613157565b500290565b6000828210156130d0576130d0613157565b500390565b60005b838110156130f05781810151838201526020016130d8565b8381111561220a5750506000910152565b60028104600182168061311557607f821691505b6020821081141561313657634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561315057613150613157565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146117b657600080fdfe04481a311a9d6c25d5003a3df0e3a0b58e5647e088a39de363764e28532a78b7a2646970667358221220eb1ffe10b8f64ea61ff357e1b9aab4547972b57f6dc9e4933b310df7ea95665d64736f6c63430008000033a2646970667358221220ec8703375005d3f0d39253ffe408024feed84427eb3d9ed4955f3651e8f5eb2764736f6c63430008000033","abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"name","type":"string"},{"indexed":false,"internalType":"address","name":"addr","type":"address"}],"name":"NewHolon","type":"event"},{"inputs":[],"name":"listHolons","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_address","type":"address"}],"name":"listHolonsOf","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"_name","type":"string"},{"internalType":"uint256","name":"_parameter","type":"uint256"}],"name":"newHolon","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"","type":"string"}],"name":"toAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}]}